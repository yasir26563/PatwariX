{"version":3,"sources":["/Users/ahmedyasir/Downloads/themeforest-ZxrtabYw-housekey-angular-material-design-real-estate-template/housekey/node_modules/mat-video/fesm2015/mat-video.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;oGAWE;2BACyB,AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;02DAkGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAsF8B,AAM7B;;;;;;;;;;;;;;;;;;;;;;;qNAqBD;;;;;;;;;sCASoC,AAInC;;;;;;;;;;;;;;;;;;;;;;;;;;;;sPA0BD;;;;;;;;;;;;;;;;;qCAiBmC,AAIlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wiBA6BD;;;;;;;;;;;;;;4CAc0C,AAsCzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCD,4GAKoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mHA0GpB;gCAC8B,AAE7B;;;;;;;;;;;;;;;iIAKD;;;;;;;;;yCASuC,AAMtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yEAiBD;;;;;;;;;8CAS4C,AAM3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sFAuCD;;;;;;;;;;;;;;;;;;;;;;;2CAuByC,AAMxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sFA2CD;;;;;;;;;;;;;;;;;;;;;;;qCAuBmC,AAMlC;;;;;;;;;;;;yJAMD;;;;;yCAKuC,AAMtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sEAuDD;;;;;;;;;;;;;;;;;;;;;;;;;8CAyB4C,AAM3C;;;;;;;;;;;;;;;;;gHAMD;;;;;sCAKoC,AAMnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2kFA2BD;;;;;;;;;uCASqC,AAMpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8wBA6CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAoCsC,AAMrC;;;;;;;;;;;;;;EAID;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAmCiB","file":"mat-video.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, EventEmitter, ViewChild, ElementRef, Input, Output, Component, Renderer2, Directive, Host, ChangeDetectionStrategy, Optional, Attribute, ChangeDetectorRef, Pipe, HostListener, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSlider, MAT_SLIDER_VALUE_ACCESSOR, MatSliderModule } from '@angular/material/slider';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\n\nlet EventService = class EventService {\r\n    constructor() { }\r\n    addEvents(renderer, events) {\r\n        for (const event of events)\r\n            event.dispose = renderer.listen(event.element, event.name, newEvent => event.callback(newEvent));\r\n    }\r\n    removeEvents(events) {\r\n        for (const event of events)\r\n            if (event.dispose)\r\n                event.dispose();\r\n    }\r\n};\r\nEventService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [])\r\n], EventService);\n\nlet MatVideoComponent = class MatVideoComponent {\r\n    constructor(renderer, evt) {\r\n        this.renderer = renderer;\r\n        this.evt = evt;\r\n        this.src = null;\r\n        this.title = null;\r\n        this.autoplay = false;\r\n        this.preload = true;\r\n        this.loop = false;\r\n        this.quality = true;\r\n        this.fullscreen = true;\r\n        this.showFrameByFrame = false;\r\n        this.fps = 29.97;\r\n        this.download = false;\r\n        this.color = 'primary';\r\n        this.spinner = 'spin';\r\n        this.poster = null;\r\n        this.keyboard = true;\r\n        this.overlay = null;\r\n        this.muted = false;\r\n        this.mutedChange = new EventEmitter();\r\n        this.timeChange = new EventEmitter();\r\n        this.playing = false;\r\n        this.isFullscreen = false;\r\n        this.videoLoaded = false;\r\n        this.isMouseMoving = false;\r\n        this.isMouseMovingTimeout = 2000;\r\n    }\r\n    get time() {\r\n        return this.getVideoTag().currentTime;\r\n    }\r\n    set time(val) {\r\n        const video = this.getVideoTag();\r\n        if (video && val) {\r\n            if (val > video.duration) {\r\n                val = video.duration;\r\n            }\r\n            if (val < 0) {\r\n                val = 0;\r\n            }\r\n            if (val !== video.currentTime) {\r\n                video.currentTime = val;\r\n            }\r\n            if (this.lastTime !== video.currentTime) {\r\n                setTimeout(() => this.timeChange.emit(video.currentTime), 0);\r\n                this.lastTime = video.currentTime;\r\n            }\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this.events = [\r\n            { element: this.video.nativeElement, name: 'loadstart', callback: event => this.videoLoaded = false, dispose: null },\r\n            { element: this.video.nativeElement, name: 'loadedmetadata', callback: event => this.evLoadedMetadata(event), dispose: null },\r\n            { element: this.video.nativeElement, name: 'error', callback: event => console.error('Unhandled Video Error', event), dispose: null },\r\n            { element: this.video.nativeElement, name: 'contextmenu', callback: event => event.preventDefault(), dispose: null },\r\n            { element: this.video.nativeElement, name: 'timeupdate', callback: event => this.evTimeUpdate(event), dispose: null },\r\n            { element: this.player.nativeElement, name: 'mousemove', callback: event => this.evMouseMove(event), dispose: null }\r\n        ];\r\n        this.video.nativeElement.onloadeddata = () => this.videoLoaded = true;\r\n        this.evt.addEvents(this.renderer, this.events);\r\n    }\r\n    ngOnDestroy() {\r\n        this.video.nativeElement.onloadeddata = null;\r\n        this.evt.removeEvents(this.events);\r\n    }\r\n    load() {\r\n        if (this.video && this.video.nativeElement)\r\n            this.video.nativeElement.load();\r\n    }\r\n    getVideoTag() {\r\n        return this.video && this.video.nativeElement ? this.video.nativeElement : null;\r\n    }\r\n    evLoadedMetadata(event) {\r\n        this.videoWidth = this.video.nativeElement.videoWidth;\r\n        this.videoHeight = this.video.nativeElement.videoHeight;\r\n        this.videoLoaded = true;\r\n    }\r\n    evMouseMove(event) {\r\n        this.isMouseMoving = true;\r\n        clearTimeout(this.isMouseMovingTimer);\r\n        this.isMouseMovingTimer = setTimeout(() => {\r\n            this.isMouseMoving = false;\r\n        }, this.isMouseMovingTimeout);\r\n    }\r\n    evTimeUpdate(event) {\r\n        this.time = this.getVideoTag().currentTime;\r\n    }\r\n    getOverlayClass(activeClass, inactiveClass) {\r\n        if (this.overlay === null) {\r\n            return (!this.playing || this.isMouseMoving) ? activeClass : inactiveClass;\r\n        }\r\n        else {\r\n            return this.overlay ? activeClass : inactiveClass;\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    ViewChild('player'),\r\n    __metadata(\"design:type\", ElementRef)\r\n], MatVideoComponent.prototype, \"player\", void 0);\r\n__decorate([\r\n    ViewChild('video'),\r\n    __metadata(\"design:type\", ElementRef)\r\n], MatVideoComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoComponent.prototype, \"src\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoComponent.prototype, \"title\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"autoplay\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"preload\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"loop\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"quality\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"fullscreen\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"showFrameByFrame\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], MatVideoComponent.prototype, \"fps\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"download\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoComponent.prototype, \"color\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoComponent.prototype, \"spinner\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoComponent.prototype, \"poster\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"keyboard\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"overlay\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVideoComponent.prototype, \"muted\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatVideoComponent.prototype, \"mutedChange\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], MatVideoComponent.prototype, \"time\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatVideoComponent.prototype, \"timeChange\", void 0);\r\nMatVideoComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-video',\r\n        template: \"<div #player class=\\\"videoplayer\\\" [ngClass]=\\\"getOverlayClass('show-mouse', 'hide-mouse')\\\">\\r\\n    <div class=\\\"header\\\" *ngIf=\\\"title\\\" [ngClass]=\\\"getOverlayClass('visible', 'hidden')\\\">\\r\\n        {{title}}\\r\\n    </div>\\r\\n\\r\\n    <video #video class=\\\"video\\\" [attr.src]=\\\"src ? src : null\\\" [attr.autoplay]=\\\"autoplay ? true : null\\\"\\r\\n        [preload]=\\\"preload ? 'auto' : 'metadata'\\\" [attr.poster]=\\\"poster ? poster : null\\\"\\r\\n        [attr.loop]=\\\"loop ? loop : null\\\">\\r\\n        <ng-content select=\\\"source\\\"></ng-content>\\r\\n        <ng-content select=\\\"track\\\"></ng-content>\\r\\n        This browser does not support HTML5 video.\\r\\n    </video>\\r\\n\\r\\n    <div class=\\\"controls\\\" *ngIf=\\\"videoLoaded\\\" [ngClass]=\\\"getOverlayClass('visible', 'hidden')\\\">\\r\\n        <div class=\\\"progress\\\">\\r\\n            <mat-seek-progress-control [color]=\\\"color\\\" [video]=\\\"video\\\"></mat-seek-progress-control>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"menu\\\">\\r\\n            <div class=\\\"left\\\">\\r\\n                <mat-play-button (playChanged)=\\\"playing = $event\\\" [video]=\\\"video\\\" [keyboard]=\\\"keyboard\\\">\\r\\n                </mat-play-button>\\r\\n\\r\\n                <mat-frame-by-frame-control *ngIf=\\\"showFrameByFrame\\\" [video]=\\\"video\\\" [fps]=\\\"fps\\\"></mat-frame-by-frame-control>\\r\\n\\r\\n                <mat-volume-control [muted]=\\\"muted\\\" (mutedChanged)=\\\"muted = $event; mutedChange.emit(muted);\\\"\\r\\n                    [color]=\\\"color\\\" [video]=\\\"video\\\" [keyboard]=\\\"keyboard\\\">\\r\\n                </mat-volume-control>\\r\\n\\r\\n                <mat-time-control [video]=\\\"video\\\"></mat-time-control>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"right\\\">\\r\\n                <mat-quality-control *ngIf=\\\"quality\\\" [video]=\\\"video\\\"></mat-quality-control>\\r\\n\\r\\n                <mat-download-button *ngIf=\\\"download\\\" [title]=\\\"title\\\" [video]=\\\"video\\\"></mat-download-button>\\r\\n\\r\\n                <mat-fullscreen-button *ngIf=\\\"fullscreen\\\" (fullscreenChanged)=\\\"isFullscreen = $event\\\" [player]=\\\"player\\\"\\r\\n                    [keyboard]=\\\"keyboard\\\"></mat-fullscreen-button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-video-spinner [spinner]=\\\"spinner\\\" [video]=\\\"video\\\"></mat-video-spinner>\\r\\n</div>\\r\\n\",\r\n        styles: [\".videoplayer{font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;background-color:#000;position:relative;width:100%;height:100%}.header{color:#fff;display:flex;justify-content:center;align-items:center;position:absolute;left:0;top:0;padding:14px 0;width:100%;z-index:1;background-image:linear-gradient(to top,rgba(0,0,0,0),rgba(0,0,0,.65))}.video{display:block;width:100%;height:100%;z-index:0}.controls{color:#fff;position:absolute;left:0;bottom:0;width:100%;z-index:1;background-image:linear-gradient(to bottom,rgba(0,0,0,0),rgba(0,0,0,.65))}.controls .progress{height:26px}.controls .menu{display:flex;align-items:center;flex-direction:row;justify-content:space-between;height:48px}.controls .menu .left{justify-content:flex-start}.controls .menu .right{justify-content:flex-end}.visible{visibility:visible;opacity:1;transition:opacity .5s linear}.hidden{visibility:hidden;opacity:0;transition:visibility .5s,opacity .5s linear}.show-mouse{cursor:default}.hide-mouse{cursor:none}\", \"@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/materialicons/v36/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2')}::ng-deep.material-icons{font-family:'Material Icons';font-weight:400;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;font-feature-settings:'liga';-webkit-font-feature-settings:'liga';-webkit-font-smoothing:antialiased}\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Renderer2,\r\n        EventService])\r\n], MatVideoComponent);\n\nlet MatVideoSourceDirective = class MatVideoSourceDirective {\r\n    constructor(matVideoComponent, el) {\r\n        this.matVideoComponent = matVideoComponent;\r\n        this.el = el;\r\n        this.src = null;\r\n        this.type = null;\r\n        this.init = true;\r\n        this.video = matVideoComponent;\r\n        this.source = el.nativeElement;\r\n        this.init = false;\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.source.src = this.src;\r\n        this.source.type = this.type;\r\n        if (!this.init)\r\n            this.video.load();\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoSourceDirective.prototype, \"src\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoSourceDirective.prototype, \"type\", void 0);\r\nMatVideoSourceDirective = __decorate([\r\n    Directive({\r\n        selector: '[matVideoSource]'\r\n    }),\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [MatVideoComponent,\r\n        ElementRef])\r\n], MatVideoSourceDirective);\n\nlet MatVideoTrackDirective = class MatVideoTrackDirective {\r\n    constructor(matVideoComponent, el) {\r\n        this.matVideoComponent = matVideoComponent;\r\n        this.el = el;\r\n        this.src = null;\r\n        this.kind = null;\r\n        this.srclang = null;\r\n        this.label = null;\r\n        this.init = true;\r\n        this.video = matVideoComponent;\r\n        this.track = el.nativeElement;\r\n        this.init = false;\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.track.src = this.src;\r\n        this.track.kind = this.kind;\r\n        this.track.srclang = this.srclang;\r\n        this.track.label = this.label;\r\n        if (!this.init)\r\n            this.video.load();\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoTrackDirective.prototype, \"src\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoTrackDirective.prototype, \"kind\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoTrackDirective.prototype, \"srclang\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoTrackDirective.prototype, \"label\", void 0);\r\nMatVideoTrackDirective = __decorate([\r\n    Directive({\r\n        selector: '[matVideoTrack]'\r\n    }),\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [MatVideoComponent,\r\n        ElementRef])\r\n], MatVideoTrackDirective);\n\n/** Counter used to generate unique IDs for progress bars. */\r\nlet sliderprogressbarId = 0;\r\nlet MatSliderProgressBarComponent = class MatSliderProgressBarComponent extends MatSlider {\r\n    constructor(elementRef, focusMonitor, changeDetectorRef, dir, tabIndex) {\r\n        super(elementRef, focusMonitor, changeDetectorRef, dir, tabIndex);\r\n        this.mode = 'buffer';\r\n        this.value = 0;\r\n        this._bufferValue = 0;\r\n        /** The id of the progress bar. */\r\n        this.sliderprogressbarId = `mat-slider-progress-bar-${sliderprogressbarId++}`;\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n    }\r\n    /** Buffer value of the progress bar. Defaults to zero. */\r\n    get bufferValue() { return this._bufferValue; }\r\n    set bufferValue(v) { this._bufferValue = clamp(v || 0); }\r\n    /** CSS styles for the track fill element. */\r\n    get _trackBufferStyles() {\r\n        if (this.mode === 'buffer') {\r\n            const axis = this.vertical ? 'Y' : 'X';\r\n            return {\r\n                'transform': `translate${axis}(0px) scale${axis}(${this._bufferValue / 100})`\r\n            };\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatSliderProgressBarComponent.prototype, \"mode\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], MatSliderProgressBarComponent.prototype, \"value\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], MatSliderProgressBarComponent.prototype, \"bufferValue\", null);\r\nMatSliderProgressBarComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-slider-progress-bar',\r\n        template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\r\\n    <div class=\\\"mat-slider-track-wrapper\\\">\\r\\n        <svg width=\\\"100%\\\" height=\\\"2\\\" focusable=\\\"false\\\" class=\\\"mat-slider-progress-background\\\">\\r\\n            <defs>\\r\\n                <pattern [id]=\\\"sliderprogressbarId\\\" x=\\\"2.5\\\" y=\\\"0\\\" width=\\\"5\\\" height=\\\"2.5\\\" patternUnits=\\\"userSpaceOnUse\\\">\\r\\n                    <circle cx=\\\"1.25\\\" cy=\\\"1.25\\\" r=\\\"1.25\\\" />\\r\\n                </pattern>\\r\\n            </defs>\\r\\n            <rect [attr.fill]=\\\"'url(#' + sliderprogressbarId + ')'\\\" width=\\\"100%\\\" height=\\\"100%\\\" />\\r\\n        </svg>\\r\\n        <div class=\\\"mat-slider-track-fill mat-slider-track-buffer\\\" [ngStyle]=\\\"_trackBufferStyles\\\"></div>\\r\\n        <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\r\\n    </div>\\r\\n    <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\r\\n        <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\r\\n    </div>\\r\\n    <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\r\\n        <div class=\\\"mat-slider-focus-ring\\\"></div>\\r\\n        <div class=\\\"mat-slider-thumb\\\"></div>\\r\\n        <div class=\\\"mat-slider-thumb-label\\\">\\r\\n            <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\",\r\n        providers: [MAT_SLIDER_VALUE_ACCESSOR],\r\n        host: {\r\n            '(focus)': '_onFocus()',\r\n            '(blur)': '_onBlur()',\r\n            '(click)': 'this[\"_onClick\"] ? this[\"_onClick\"]($event) : null',\r\n            '(mousedown)': 'this[\"_onMousedown\"] ? this[\"_onMousedown\"]($event) : null',\r\n            '(keydown)': '_onKeydown($event)',\r\n            '(keyup)': '_onKeyup()',\r\n            '(mouseenter)': '_onMouseenter()',\r\n            '(slide)': '_onSlide($event)',\r\n            '(slideend)': '_onSlideEnd()',\r\n            '(slidestart)': '_onSlideStart($event)',\r\n            'class': 'mat-slider',\r\n            'role': 'slider',\r\n            '[tabIndex]': 'tabIndex',\r\n            '[attr.aria-disabled]': 'disabled',\r\n            '[attr.aria-valuemax]': 'max',\r\n            '[attr.aria-valuemin]': 'min',\r\n            '[attr.aria-valuenow]': 'value',\r\n            '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n            '[class.mat-slider-disabled]': 'disabled',\r\n            '[class.mat-slider-has-ticks]': 'tickInterval',\r\n            '[class.mat-slider-horizontal]': '!vertical',\r\n            '[class.mat-slider-axis-inverted]': '_invertAxis',\r\n            '[class.mat-slider-sliding]': '_isSliding',\r\n            '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\r\n            '[class.mat-slider-vertical]': 'vertical',\r\n            '[class.mat-slider-min-value]': '_isMinValue',\r\n            '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\r\n        },\r\n        inputs: ['disabled', 'color', 'tabIndex'],\r\n        changeDetection: ChangeDetectionStrategy.OnPush,\r\n        styles: [\":host{width:100%}.mat-slider-progress-background{position:absolute;height:2px;width:100%;fill:#d3d3d3}.mat-slider-track-buffer{background-color:#d3d3d3!important}.mat-slider-thumb{border-color:transparent!important;visibility:hidden;opacity:0;transition:visibility .2s,opacity .2s linear}:host:hover .mat-slider-thumb{visibility:visible;opacity:1;transition:opacity .2s linear}\"]\r\n    }),\r\n    __param(3, Optional()),\r\n    __param(4, Attribute('tabindex')),\r\n    __metadata(\"design:paramtypes\", [ElementRef,\r\n        FocusMonitor,\r\n        ChangeDetectorRef,\r\n        Directionality, String])\r\n], MatSliderProgressBarComponent);\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v, min = 0, max = 100) {\r\n    return Math.max(min, Math.min(max, v));\r\n}\n\nlet SecondsToTimePipe = class SecondsToTimePipe {\r\n    constructor() {\r\n        this.times = {\r\n            year: 31557600,\r\n            month: 2629746,\r\n            day: 86400,\r\n            hour: 3600,\r\n        };\r\n    }\r\n    transform(seconds) {\r\n        if (!seconds)\r\n            return '0:00';\r\n        else {\r\n            let time_string = '';\r\n            for (const key in this.times) {\r\n                if (Math.floor(seconds / this.times[key]) > 0) {\r\n                    time_string += Math.floor(seconds / this.times[key]).toString() + ':';\r\n                    seconds = seconds - this.times[key] * Math.floor(seconds / this.times[key]);\r\n                }\r\n            }\r\n            time_string += Math.floor(seconds / 60).toString() + ':';\r\n            seconds = seconds - 60 * Math.floor(seconds / 60);\r\n            if (Math.floor(seconds) < 10)\r\n                time_string += '0';\r\n            time_string += Math.floor(seconds).toString();\r\n            return time_string;\r\n        }\r\n    }\r\n};\r\nSecondsToTimePipe = __decorate([\r\n    Pipe({\r\n        name: 'secondsToTime'\r\n    })\r\n], SecondsToTimePipe);\n\nlet FullscreenService = class FullscreenService {\r\n    constructor() {\r\n        this.fnMap = [\r\n            // Object keys\r\n            [\r\n                'requestFullscreen',\r\n                'exitFullscreen',\r\n                'fullscreenElement',\r\n                'fullscreenEnabled',\r\n                'fullscreenchange',\r\n                'fullscreenerror'\r\n            ],\r\n            // New WebKit\r\n            [\r\n                'webkitRequestFullscreen',\r\n                'webkitExitFullscreen',\r\n                'webkitFullscreenElement',\r\n                'webkitFullscreenEnabled',\r\n                'webkitfullscreenchange',\r\n                'webkitfullscreenerror'\r\n            ],\r\n            // Old WebKit (Safari 5.1)\r\n            [\r\n                'webkitRequestFullScreen',\r\n                'webkitCancelFullScreen',\r\n                'webkitCurrentFullScreenElement',\r\n                'webkitCancelFullScreen',\r\n                'webkitfullscreenchange',\r\n                'webkitfullscreenerror'\r\n            ],\r\n            // Mozilla\r\n            [\r\n                'mozRequestFullScreen',\r\n                'mozCancelFullScreen',\r\n                'mozFullScreenElement',\r\n                'mozFullScreenEnabled',\r\n                'mozfullscreenchange',\r\n                'mozfullscreenerror'\r\n            ],\r\n            // MS\r\n            [\r\n                'msRequestFullscreen',\r\n                'msExitFullscreen',\r\n                'msFullscreenElement',\r\n                'msFullscreenEnabled',\r\n                'MSFullscreenChange',\r\n                'MSFullscreenError'\r\n            ]\r\n        ];\r\n        this.keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;\r\n        const ret = {};\r\n        let val;\r\n        for (let i = 0; i < this.fnMap.length; i++) {\r\n            val = this.fnMap[i];\r\n            if (val && val[1] in document) {\r\n                for (i = 0; i < val.length; i++) {\r\n                    // Map everything to the first list of keys\r\n                    ret[this.fnMap[0][i].toString()] = val[i];\r\n                }\r\n                this.fn = ret;\r\n            }\r\n        }\r\n    }\r\n    request(elem) {\r\n        const request = this.fn.requestFullscreen;\r\n        elem = elem || document.documentElement;\r\n        // Work around Safari 5.1 bug: reports support for\r\n        // keyboard in fullscreen even though it doesn't.\r\n        // Browser sniffing, since the alternative with\r\n        // setTimeout is even worse.\r\n        if (/5\\.1[.\\d]* Safari/.test(navigator.userAgent)) {\r\n            elem[request]();\r\n        }\r\n        else {\r\n            elem[request](this.keyboardAllowed ? Element.ALLOW_KEYBOARD_INPUT : {});\r\n        }\r\n    }\r\n    exit() {\r\n        document[this.fn.exitFullscreen]();\r\n    }\r\n    toggle(elem) {\r\n        if (this.isFullscreen()) {\r\n            this.exit();\r\n        }\r\n        else {\r\n            this.request(elem);\r\n        }\r\n    }\r\n    onChange(callback) {\r\n        document.addEventListener(this.fn.fullscreenchange, callback, false);\r\n    }\r\n    onError(callback) {\r\n        document.addEventListener(this.fn.fullscreenerror, callback, false);\r\n    }\r\n    isFullscreen() {\r\n        return Boolean(document[this.fn.fullscreenElement]);\r\n    }\r\n    isEnabled() {\r\n        // Coerce to boolean in case of old WebKit\r\n        return Boolean(document[this.fn.fullscreenEnabled]);\r\n    }\r\n    getElement() {\r\n        return document[this.fn.fullscreenElement];\r\n    }\r\n};\r\nFullscreenService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [])\r\n], FullscreenService);\n\nlet MatDownloadButtonComponent = class MatDownloadButtonComponent {\r\n    constructor() { }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatDownloadButtonComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatDownloadButtonComponent.prototype, \"title\", void 0);\r\nMatDownloadButtonComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-download-button',\r\n        template: \"<a mat-icon-button [href]=\\\"video?.currentSrc\\\" [download]=\\\"title\\\">\\r\\n  <mat-icon>file_download</mat-icon>\\r\\n</a>\",\r\n        styles: [\"a{color:inherit;text-decoration:none}\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], MatDownloadButtonComponent);\n\nlet MatFrameByFrameControlComponent = class MatFrameByFrameControlComponent {\r\n    constructor() {\r\n        this.fps = 29.97;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    seekFrames(nbFrames) {\r\n        if (!this.video.paused) {\r\n            this.video.pause();\r\n        }\r\n        const currentFrames = this.video.currentTime * this.fps;\r\n        const newPos = ((currentFrames + nbFrames) / this.fps) + 0.00001;\r\n        this.video.currentTime = newPos;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatFrameByFrameControlComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], MatFrameByFrameControlComponent.prototype, \"fps\", void 0);\r\nMatFrameByFrameControlComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-frame-by-frame-control',\r\n        template: \"<button mat-icon-button (click)=\\\"seekFrames(-5)\\\">\\r\\n    <mat-icon>skip_previous</mat-icon>\\r\\n</button>\\r\\n\\r\\n<button mat-icon-button (click)=\\\"seekFrames(-1)\\\">\\r\\n    <mat-icon>arrow_left</mat-icon>\\r\\n</button>\\r\\n\\r\\n<button mat-icon-button (click)=\\\"seekFrames(1)\\\">\\r\\n    <mat-icon>arrow_right</mat-icon>\\r\\n</button>\\r\\n\\r\\n<button mat-icon-button (click)=\\\"seekFrames(5)\\\">\\r\\n    <mat-icon>skip_next</mat-icon>\\r\\n</button>\",\r\n        styles: [\"\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], MatFrameByFrameControlComponent);\n\nlet MatFullscreenButtonComponent = class MatFullscreenButtonComponent {\r\n    constructor(fscreen, evt) {\r\n        this.fscreen = fscreen;\r\n        this.evt = evt;\r\n        this.canFullscreen = false;\r\n        this.fullscreen = false;\r\n        this.fullscreenChanged = new EventEmitter();\r\n        this.keyboard = true;\r\n    }\r\n    ngOnInit() {\r\n        if (this.fscreen.isEnabled())\r\n            this.canFullscreen = true;\r\n        this.fscreen.onChange(event => this.fscreen.isFullscreen() ? this.onChangesFullscreen(true) : this.onChangesFullscreen(false));\r\n    }\r\n    setFullscreen(value) {\r\n        if (this.canFullscreen && this.fullscreen !== value)\r\n            this.toggleFullscreen();\r\n    }\r\n    toggleFullscreen() {\r\n        this.fullscreen = !this.fullscreen;\r\n        this.updateFullscreen();\r\n    }\r\n    updateFullscreen() {\r\n        this.fullscreen ? this.fscreen.request(this.player) : this.fscreen.exit();\r\n        this.fullscreenChanged.emit(this.fullscreen);\r\n    }\r\n    onChangesFullscreen(value) {\r\n        this.fullscreen = value;\r\n        this.fullscreenChanged.emit(this.fullscreen);\r\n    }\r\n    onFullscreenKey(event) {\r\n        if (this.keyboard) {\r\n            this.toggleFullscreen();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatFullscreenButtonComponent.prototype, \"player\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatFullscreenButtonComponent.prototype, \"fullscreen\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatFullscreenButtonComponent.prototype, \"fullscreenChanged\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatFullscreenButtonComponent.prototype, \"keyboard\", void 0);\r\n__decorate([\r\n    HostListener('document:keyup.f', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [KeyboardEvent]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], MatFullscreenButtonComponent.prototype, \"onFullscreenKey\", null);\r\nMatFullscreenButtonComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-fullscreen-button',\r\n        template: \"<button mat-icon-button [disabled]=\\\"!canFullscreen\\\" (click)=\\\"toggleFullscreen()\\\">\\r\\n  <mat-icon *ngIf=\\\"!fullscreen\\\">fullscreen</mat-icon>\\r\\n  <mat-icon *ngIf=\\\"fullscreen\\\">fullscreen_exit</mat-icon>\\r\\n</button>\",\r\n        styles: [\"\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [FullscreenService,\r\n        EventService])\r\n], MatFullscreenButtonComponent);\n\nlet MatPlayButtonComponent = class MatPlayButtonComponent {\r\n    constructor(renderer, evt) {\r\n        this.renderer = renderer;\r\n        this.evt = evt;\r\n        this.play = false;\r\n        this.playChanged = new EventEmitter();\r\n        this.keyboard = true;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.events = [\r\n            { element: this.video, name: 'play', callback: event => this.setVideoPlayback(true), dispose: null },\r\n            { element: this.video, name: 'pause', callback: event => this.setVideoPlayback(false), dispose: null },\r\n            { element: this.video, name: 'durationchange', callback: event => this.setVideoPlayback(false), dispose: null },\r\n            { element: this.video, name: 'ended', callback: event => this.setVideoPlayback(false), dispose: null },\r\n            { element: this.video, name: 'click', callback: event => this.toggleVideoPlayback(), dispose: null }\r\n        ];\r\n        this.evt.addEvents(this.renderer, this.events);\r\n    }\r\n    ngOnDestroy() {\r\n        this.evt.removeEvents(this.events);\r\n    }\r\n    setVideoPlayback(value) {\r\n        if (this.play !== value)\r\n            this.toggleVideoPlayback();\r\n    }\r\n    toggleVideoPlayback() {\r\n        this.play = !this.play;\r\n        this.updateVideoPlayback();\r\n    }\r\n    updateVideoPlayback() {\r\n        this.play ? this.video.play() : this.video.pause();\r\n        this.playChanged.emit(this.play);\r\n    }\r\n    onPlayKey(event) {\r\n        if (this.keyboard) {\r\n            this.toggleVideoPlayback();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatPlayButtonComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatPlayButtonComponent.prototype, \"play\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatPlayButtonComponent.prototype, \"playChanged\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatPlayButtonComponent.prototype, \"keyboard\", void 0);\r\n__decorate([\r\n    HostListener('document:keyup.space', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [KeyboardEvent]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], MatPlayButtonComponent.prototype, \"onPlayKey\", null);\r\nMatPlayButtonComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-play-button',\r\n        template: \"<button mat-icon-button (click)=\\\"toggleVideoPlayback()\\\">\\r\\n  <mat-icon *ngIf=\\\"!play\\\">play_arrow</mat-icon>\\r\\n  <mat-icon *ngIf=\\\"play\\\">pause</mat-icon>\\r\\n</button>\",\r\n        styles: [\"\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Renderer2,\r\n        EventService])\r\n], MatPlayButtonComponent);\n\nlet MatQualityControlComponent = class MatQualityControlComponent {\r\n    constructor() { }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatQualityControlComponent.prototype, \"video\", void 0);\r\nMatQualityControlComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-quality-control',\r\n        template: \"<div *ngIf=\\\"video && video.videoHeight\\\" class=\\\"quality\\\">\\r\\n  {{ video.videoHeight }}p\\r\\n</div>\",\r\n        styles: [\".quality{display:inline-block;font-size:12px;padding-left:12px;padding-right:12px}\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], MatQualityControlComponent);\n\nlet MatSeekProgressControlComponent = class MatSeekProgressControlComponent {\r\n    constructor(renderer, evt) {\r\n        this.renderer = renderer;\r\n        this.evt = evt;\r\n        this.curTimePercent = 0;\r\n        this.bufTimePercent = 0;\r\n        this.video = null;\r\n        this.color = 'primary';\r\n        this.currentTime = 0;\r\n        this.currentTimeChanged = new EventEmitter();\r\n        this.bufferedTime = 0;\r\n        this.bufferedTimeChanged = new EventEmitter();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.events = [\r\n            { element: this.video, name: 'seeking', callback: event => this.updateCurrentTime(this.video.currentTime), dispose: null },\r\n            { element: this.video, name: 'canplaythrough', callback: event => this.updateBufferedTime(), dispose: null },\r\n            { element: this.video, name: 'timeupdate', callback: event => this.updateCurrentTime(this.video.currentTime), dispose: null },\r\n            { element: this.video, name: 'progress', callback: event => this.updateBufferedTime(), dispose: null }\r\n        ];\r\n        this.evt.addEvents(this.renderer, this.events);\r\n    }\r\n    ngOnDestroy() {\r\n        this.evt.removeEvents(this.events);\r\n    }\r\n    seekVideo(value) {\r\n        const percentage = value / 100;\r\n        const newTime = this.video.duration * percentage;\r\n        this.video.currentTime = newTime;\r\n    }\r\n    updateCurrentTime(time) {\r\n        this.currentTime = time;\r\n        this.curTimePercent = this.updateTime(this.currentTimeChanged, this.currentTime);\r\n    }\r\n    updateBufferedTime() {\r\n        if (this.video.buffered.length > 0) {\r\n            let largestBufferValue = 0;\r\n            for (let i = 0; i < this.video.buffered.length; i++) {\r\n                const cur = this.video.currentTime;\r\n                const start = this.video.buffered.start(i);\r\n                const end = this.video.buffered.end(i);\r\n                if (start <= cur && end > cur && (end - start) > largestBufferValue)\r\n                    largestBufferValue = end;\r\n            }\r\n            this.bufferedTime = largestBufferValue;\r\n            this.bufTimePercent = this.updateTime(this.bufferedTimeChanged, this.bufferedTime);\r\n        }\r\n    }\r\n    updateTime(emitter, time) {\r\n        emitter.emit(time);\r\n        return time / this.video.duration * 100;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatSeekProgressControlComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatSeekProgressControlComponent.prototype, \"color\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], MatSeekProgressControlComponent.prototype, \"currentTime\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatSeekProgressControlComponent.prototype, \"currentTimeChanged\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], MatSeekProgressControlComponent.prototype, \"bufferedTime\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatSeekProgressControlComponent.prototype, \"bufferedTimeChanged\", void 0);\r\nMatSeekProgressControlComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-seek-progress-control',\r\n        template: \"<mat-slider-progress-bar [color]=\\\"color\\\" mode=\\\"buffer\\\" step=\\\"0.01\\\" [value]=\\\"curTimePercent\\\" [bufferValue]=\\\"bufTimePercent\\\"\\n  (input)=\\\"seekVideo($event.value)\\\"></mat-slider-progress-bar>\",\r\n        styles: [\"\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Renderer2,\r\n        EventService])\r\n], MatSeekProgressControlComponent);\n\nlet MatTimeControlComponent = class MatTimeControlComponent {\r\n    constructor() { }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatTimeControlComponent.prototype, \"video\", void 0);\r\nMatTimeControlComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-time-control',\r\n        template: \"<div class=\\\"playtime\\\">\\r\\n  {{ video?.currentTime | secondsToTime }} / {{ video?.duration | secondsToTime}}\\r\\n</div>\",\r\n        styles: [\".playtime{display:inline;font-size:12px}\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], MatTimeControlComponent);\n\nlet MatVideoSpinnerComponent = class MatVideoSpinnerComponent {\r\n    constructor(renderer, evt) {\r\n        this.renderer = renderer;\r\n        this.evt = evt;\r\n        this.spinner = 'spin';\r\n        this.videoBuffering = false;\r\n        this.videoLoaded = false;\r\n        this.events = [];\r\n    }\r\n    ngAfterViewInit() {\r\n        this.events = [\r\n            { element: this.video, name: 'loadstart', callback: event => this.videoLoaded = false, dispose: null },\r\n            { element: this.video, name: 'loadedmetadata', callback: event => this.videoLoaded = true, dispose: null },\r\n            { element: this.video, name: 'canplay', callback: event => this.videoBuffering = false, dispose: null },\r\n            { element: this.video, name: 'waiting', callback: event => this.videoBuffering = true, dispose: null },\r\n            { element: this.video, name: 'durationchange', callback: event => this.videoBuffering = true, dispose: null }\r\n        ];\r\n        this.video.onloadeddata = () => this.videoLoaded = true;\r\n        this.evt.addEvents(this.renderer, this.events);\r\n    }\r\n    ngOnDestroy() {\r\n        this.video.onloadeddata = null;\r\n        this.evt.removeEvents(this.events);\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatVideoSpinnerComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVideoSpinnerComponent.prototype, \"spinner\", void 0);\r\nMatVideoSpinnerComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-video-spinner',\r\n        template: \"<div *ngIf=\\\"!videoLoaded || videoBuffering\\\" [class]=\\\"spinner\\\"></div>\",\r\n        styles: [\":host{position:absolute;left:calc(50% - 32px);top:calc(50% - 32px);z-index:1}\", \".spin{box-sizing:border-box;width:64px;height:64px;border-radius:100%;border:10px solid rgba(255,255,255,.2);border-top-color:#fff;-webkit-animation:1s linear infinite spin;animation:1s linear infinite spin}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\", \".dot{width:64px;height:64px;background-color:#fff;border-radius:100%;-webkit-animation:1s ease-in-out infinite dot;animation:1s ease-in-out infinite dot}@-webkit-keyframes dot{0%{-webkit-transform:scale(0)}100%{-webkit-transform:scale(1);opacity:0}}@keyframes dot{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1);opacity:0}}\", \".split-ring{display:inline-block;width:64px;height:64px}.split-ring:after{content:\\\" \\\";display:block;width:46px;height:46px;margin:1px;border-radius:50%;border:5px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s linear infinite split-ring;animation:1.2s linear infinite split-ring}@-webkit-keyframes split-ring{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes split-ring{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\", \".hourglass{display:inline-block;position:relative;width:64px;height:64px}.hourglass:after{content:\\\" \\\";display:block;border-radius:50%;width:0;height:0;margin:6px;box-sizing:border-box;border:26px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s infinite hourglass;animation:1.2s infinite hourglass}@-webkit-keyframes hourglass{0%{-webkit-transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg)}}@keyframes hourglass{0%{-webkit-transform:rotate(0);transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg);transform:rotate(720deg)}}\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Renderer2,\r\n        EventService])\r\n], MatVideoSpinnerComponent);\n\nlet MatVolumeControlComponent = class MatVolumeControlComponent {\r\n    constructor(evt) {\r\n        this.evt = evt;\r\n        this.video = null;\r\n        this.color = 'primary';\r\n        this.volume = 1;\r\n        this.volumeChanged = new EventEmitter();\r\n        this._muted = false;\r\n        this.mutedChanged = new EventEmitter();\r\n        this.keyboard = true;\r\n    }\r\n    get muted() { return this._muted; }\r\n    set muted(v) {\r\n        this._muted = v;\r\n        this.video.muted = this._muted;\r\n    }\r\n    setVolume(value) {\r\n        this.volume = value;\r\n        this.video.volume = this.volume;\r\n        this.volumeChanged.emit(this.volume);\r\n        if (this.volume > 0)\r\n            this.setMuted(false);\r\n    }\r\n    setMuted(value) {\r\n        if (this.muted !== value)\r\n            this.toggleMuted();\r\n    }\r\n    toggleMuted() {\r\n        this.muted = !this.muted;\r\n        this.updateMuted();\r\n    }\r\n    updateMuted() {\r\n        this.video.muted = this.muted;\r\n        this.mutedChanged.emit(this.muted);\r\n    }\r\n    onMuteKey(event) {\r\n        if (this.keyboard) {\r\n            this.toggleMuted();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", HTMLVideoElement)\r\n], MatVolumeControlComponent.prototype, \"video\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], MatVolumeControlComponent.prototype, \"color\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], MatVolumeControlComponent.prototype, \"volume\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatVolumeControlComponent.prototype, \"volumeChanged\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], MatVolumeControlComponent.prototype, \"muted\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], MatVolumeControlComponent.prototype, \"mutedChanged\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], MatVolumeControlComponent.prototype, \"keyboard\", void 0);\r\n__decorate([\r\n    HostListener('document:keyup.m', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [KeyboardEvent]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], MatVolumeControlComponent.prototype, \"onMuteKey\", null);\r\nMatVolumeControlComponent = __decorate([\r\n    Component({\r\n        selector: 'mat-volume-control',\r\n        template: \"<div class=\\\"volume-control\\\">\\r\\n  <button mat-icon-button (click)=\\\"toggleMuted()\\\">\\r\\n    <mat-icon *ngIf=\\\"muted || volume === 0\\\">volume_off</mat-icon>\\r\\n    <mat-icon *ngIf=\\\"!muted && volume > 0 && volume < 0.25\\\">volume_mute</mat-icon>\\r\\n    <mat-icon *ngIf=\\\"!muted && volume >= 0.25 && volume < 0.5\\\">volume_down</mat-icon>\\r\\n    <mat-icon *ngIf=\\\"!muted && volume >= 0.5\\\">volume_up</mat-icon>\\r\\n  </button>\\r\\n  <mat-slider class=\\\"volume-slider\\\" [color]=\\\"color\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.01\\\" value=\\\"1\\\" (input)=\\\"setVolume($event.value)\\\">\\r\\n  </mat-slider>\\r\\n</div>\",\r\n        styles: [\".volume-control{display:inline}.volume-slider{margin-left:-15px}::ng-deep.mat-slider-thumb{border-color:transparent!important}::ng-deep.mat-slider-track-background{background-color:#d3d3d3!important;-webkit-transform:translateX(0)!important;transform:translateX(0)!important}.volume-control .volume-slider{visibility:hidden;opacity:0;min-width:0;width:0;transition:visibility .2s,opacity .2s linear,width .2s linear}.volume-control:hover .volume-slider{visibility:visible;opacity:1;min-width:90px;width:90px;transition:opacity .2s linear,width .2s linear,min-width .2s linear}\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [EventService])\r\n], MatVolumeControlComponent);\n\nlet MatVideoModule = class MatVideoModule {\r\n};\r\nMatVideoModule = __decorate([\r\n    NgModule({\r\n        declarations: [\r\n            SecondsToTimePipe,\r\n            MatVideoComponent,\r\n            MatSliderProgressBarComponent,\r\n            MatPlayButtonComponent,\r\n            MatVolumeControlComponent,\r\n            MatDownloadButtonComponent,\r\n            MatFullscreenButtonComponent,\r\n            MatTimeControlComponent,\r\n            MatQualityControlComponent,\r\n            MatVideoSpinnerComponent,\r\n            MatSeekProgressControlComponent,\r\n            MatVideoSourceDirective,\r\n            MatVideoTrackDirective,\r\n            MatFrameByFrameControlComponent\r\n        ],\r\n        imports: [\r\n            CommonModule,\r\n            MatIconModule,\r\n            MatButtonModule,\r\n            MatSliderModule,\r\n        ],\r\n        exports: [\r\n            MatVideoComponent,\r\n            MatVideoSourceDirective,\r\n            MatVideoTrackDirective\r\n        ],\r\n        providers: [\r\n            FullscreenService,\r\n            EventService\r\n        ]\r\n    })\r\n], MatVideoModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MatVideoModule, SecondsToTimePipe as ɵa, MatVideoComponent as ɵb, EventService as ɵc, MatSliderProgressBarComponent as ɵd, MatPlayButtonComponent as ɵe, MatVolumeControlComponent as ɵf, MatDownloadButtonComponent as ɵg, MatFullscreenButtonComponent as ɵh, FullscreenService as ɵi, MatTimeControlComponent as ɵj, MatQualityControlComponent as ɵk, MatVideoSpinnerComponent as ɵl, MatSeekProgressControlComponent as ɵm, MatVideoSourceDirective as ɵn, MatVideoTrackDirective as ɵo, MatFrameByFrameControlComponent as ɵp };\n"]}