{"version":3,"file":"ngx-progressbar.js","sources":["ng://ngx-progressbar/lib/ng-progress-ref.ts","ng://ngx-progressbar/lib/ng-progress.interface.ts","ng://ngx-progressbar/lib/ng-progress.service.ts","ng://ngx-progressbar/lib/ng-progress.component.ts","ng://ngx-progressbar/lib/ng-progress.module.ts"],"sourcesContent":["import { Observable, Subject, BehaviorSubject, timer, of, combineLatest, Subscription, EMPTY } from 'rxjs';\r\nimport { tap, delay, debounce, switchMap, takeUntil, finalize, filter } from 'rxjs/operators';\r\nimport { NgProgressState, NgProgressConfig } from './ng-progress.interface';\r\n\r\nexport class NgProgressRef {\r\n\r\n  // Stream that emits when progress state is changed\r\n  private readonly _state: BehaviorSubject<NgProgressState>;\r\n  state: Observable<NgProgressState>;\r\n\r\n  // Stream that emits when config is changed\r\n  private readonly _config: BehaviorSubject<NgProgressConfig>;\r\n  config: Observable<NgProgressState>;\r\n\r\n  // Progress start source event (used to cancel finalizing delays)\r\n  private readonly _started = new Subject();\r\n  // Progress start event: stream that emits only when it hasn't already started\r\n  readonly started = this._started.pipe(filter(() => !this.isStarted));\r\n\r\n  // Progress ended source event\r\n  private readonly _completed = new Subject();\r\n  // Progress start event: stream that emits only when it has already started\r\n  readonly completed = this._completed.pipe(filter(() => this.isStarted));\r\n\r\n  // Stream that increments and updates the progress state\r\n  private readonly _trickling = new Subject();\r\n\r\n  // Stream that combines \"_trickling\" and \"config\" streams\r\n  private readonly _worker = Subscription.EMPTY;\r\n\r\n  // Get current progress state\r\n  private get currState(): NgProgressState {\r\n    return this._state.value;\r\n  }\r\n\r\n  // Check if progress has started\r\n  get isStarted(): boolean {\r\n    return this.currState.active;\r\n  }\r\n\r\n  constructor(customConfig: NgProgressConfig, private _onDestroyCallback: () => void) {\r\n    this._state = new BehaviorSubject<NgProgressState>({ active: false, value: 0 });\r\n    this._config = new BehaviorSubject<NgProgressConfig>(customConfig);\r\n    this.state = this._state.asObservable();\r\n    this.config = this._state.asObservable();\r\n\r\n    this._worker = combineLatest(this._trickling, this._config).pipe(\r\n      debounce(([start, config]: [boolean, NgProgressConfig]) => timer(start ? config.debounceTime : 0)),\r\n      switchMap(([start, config]: [boolean, NgProgressConfig]) => start ? this.onTrickling(config) : this.onComplete(config))\r\n    ).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Start the progress\r\n   */\r\n  start() {\r\n    this._started.next();\r\n    this._trickling.next(true);\r\n  }\r\n\r\n  /**\r\n   * Complete the progress\r\n   */\r\n  complete() {\r\n    this._trickling.next(false);\r\n  }\r\n\r\n  /**\r\n   * Increment the progress\r\n   */\r\n  inc(amount?: number) {\r\n    const n = this.currState.value;\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        amount = this._config.value.trickleFunc(n);\r\n      }\r\n      this.set(n + amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the progress\r\n   */\r\n  set(n: number) {\r\n    this.setState({ value: this.clamp(n), active: true });\r\n  }\r\n\r\n  /**\r\n   * Set config\r\n   */\r\n  setConfig(config: NgProgressConfig) {\r\n    this._config.next({ ...this._config.value, ...config });\r\n  }\r\n\r\n  /**\r\n   * Destroy progress reference\r\n   */\r\n  destroy() {\r\n    this._worker.unsubscribe();\r\n    this._trickling.complete();\r\n    this._state.complete();\r\n    this._config.complete();\r\n    this._started.complete();\r\n    this._completed.complete();\r\n    this._onDestroyCallback();\r\n  }\r\n\r\n  /**\r\n   * Set progress state\r\n   */\r\n  private setState(state: NgProgressState) {\r\n    this._state.next({ ...this.currState, ...state });\r\n  }\r\n\r\n  /**\r\n   * Clamps a value to be between min and max\r\n   */\r\n  private clamp(n: number): number {\r\n    return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\r\n  }\r\n\r\n  /**\r\n   * Keeps incrementing the progress\r\n   */\r\n  private onTrickling(config: NgProgressConfig): Observable<number> {\r\n    if (!this.isStarted) {\r\n      this.set(this._config.value.min);\r\n    }\r\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\r\n  }\r\n\r\n  /**\r\n   * Completes then resets the progress\r\n   */\r\n  private onComplete(config: NgProgressConfig): Observable<any> {\r\n    this._completed.next();\r\n    return !this.isStarted ? EMPTY : of({}).pipe(\r\n      // Complete the progress\r\n      tap(() => this.setState({ value: 100 })),\r\n\r\n      // Deactivate the progress after a tiny delay\r\n      delay(config.speed * 1.7),\r\n      tap(() => this.setState({ active: false })),\r\n\r\n      // Use a tiny delay before resetting\r\n      delay(config.speed),\r\n      // Force the progress to reset even it got cancelled\r\n      finalize(() => this.setState({ value: 0 })),\r\n      // Cancel any of the finalizing delays if the progress has started again\r\n      takeUntil(this._started)\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NgProgressState {\r\n  active?: boolean;\r\n  value?: number;\r\n}\r\n\r\nexport interface NgProgressConfig {\r\n  spinnerPosition?: 'left' | 'right';\r\n  direction?: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-';\r\n  ease?: string;\r\n  color?: string;\r\n  thick?: boolean;\r\n  fixed?: boolean;\r\n  meteor?: boolean;\r\n  spinner?: boolean;\r\n  max?: number;\r\n  min?: number;\r\n  speed?: number;\r\n  trickleSpeed?: number;\r\n  trickleFunc?: (n: number) => number;\r\n  debounceTime?: number;\r\n}\r\n\r\nexport const NG_PROGRESS_CONFIG = new InjectionToken<NgProgressConfig>('ngProgressConfig');\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressConfig, NG_PROGRESS_CONFIG } from './ng-progress.interface';\r\n\r\nconst defaultConfig: NgProgressConfig = {\r\n  min: 8,\r\n  max: 100,\r\n  speed: 200,\r\n  debounceTime: 0,\r\n  trickleSpeed: 300,\r\n  fixed: true,\r\n  meteor: true,\r\n  thick: false,\r\n  spinner: true,\r\n  ease: 'linear',\r\n  color: '#1B95E0',\r\n  direction: 'ltr+',\r\n  spinnerPosition: 'right',\r\n  trickleFunc: (n: number): number => {\r\n    if (n >= 0 && n < 20) return 10;\r\n    if (n >= 20 && n < 50) return 4;\r\n    if (n >= 50 && n < 80) return 2;\r\n    if (n >= 80 && n < 99) return 0.5;\r\n    return 0;\r\n  }\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgProgress {\r\n\r\n  // Store progress bar instances\r\n  private readonly _instances = new Map<string, NgProgressRef>();\r\n\r\n  // Global config\r\n  config: NgProgressConfig;\r\n\r\n  constructor(@Optional() @Inject(NG_PROGRESS_CONFIG) config: NgProgressConfig) {\r\n    this.config = config ? {...defaultConfig, ...config} : defaultConfig;\r\n  }\r\n\r\n  /**\r\n   * Get or Create progress bar by ID\r\n   */\r\n  ref(id = 'root', config?: NgProgressConfig) {\r\n    if (this._instances.has(id)) {\r\n      // Get ProgressRef instance\r\n      const progressRef = this._instances.get(id);\r\n      if (config) {\r\n        progressRef.setConfig({...this.config, ...config});\r\n      }\r\n      return progressRef;\r\n    } else {\r\n      // Create new ProgressRef instance\r\n      const progressRef = new NgProgressRef({...this.config, ...config}, this.deleteInstance(id));\r\n      return this._instances.set(id, progressRef).get(id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all progress bar instances\r\n   */\r\n  destroyAll() {\r\n    this._instances.forEach((ref: NgProgressRef) => ref.destroy());\r\n  }\r\n\r\n  /**\r\n   * A destroyer function for each progress bar instance\r\n   */\r\n  private deleteInstance(id: string) {\r\n    return () => {\r\n      this._instances.delete(id);\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Observable, Subscription, SubscriptionLike} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NgProgress } from './ng-progress.service';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressState } from './ng-progress.interface';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.spinnerPosition]': 'spinnerPosition',\r\n    '[attr.dir]': 'direction',\r\n    '[attr.thick]': 'thick',\r\n    '[attr.fixed]': 'fixed'\r\n  },\r\n  template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\"\r\n            [attr.active]=\"state.active\"\r\n            [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\r\n        <div class=\"ng-bar-placeholder\">\r\n          <div class=\"ng-bar\"\r\n                [style.transform]=\"state.transform\"\r\n                [style.backgroundColor]=\"color\"\r\n                [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\r\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\r\n          <div class=\"ng-spinner-icon\"\r\n                [style.borderTopColor]=\"color\"\r\n                [style.borderLeftColor]=\"color\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  styleUrls: ['./ng-progress.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  private _started: SubscriptionLike = Subscription.EMPTY;\r\n  private _completed: SubscriptionLike = Subscription.EMPTY;\r\n\r\n  /** Progress bar worker */\r\n  progressRef: NgProgressRef;\r\n\r\n  /** Stream that emits progress state */\r\n  state$: Observable<{ active: boolean, transform: string }>;\r\n\r\n  /** Creates a new instance if id is not already exists */\r\n  @Input() id = 'root';\r\n\r\n  /** Initializes inputs from the global config */\r\n  @Input() min: number = this._ngProgress.config.min;\r\n  @Input() max: number = this._ngProgress.config.max;\r\n  @Input() ease: string = this._ngProgress.config.ease;\r\n  @Input() color: string = this._ngProgress.config.color;\r\n  @Input() speed: number = this._ngProgress.config.speed;\r\n  @Input() thick: boolean = this._ngProgress.config.thick;\r\n  @Input() fixed: boolean = this._ngProgress.config.fixed;\r\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\r\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\r\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\r\n  @Input() debounceTime: number = this._ngProgress.config.debounceTime;\r\n  @Input() trickleFunc: (n: number) => number = this._ngProgress.config.trickleFunc;\r\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\r\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\r\n  @Output() started = new EventEmitter();\r\n  @Output() completed = new EventEmitter();\r\n\r\n  get isStarted() {\r\n    return this.progressRef.isStarted;\r\n  }\r\n\r\n  constructor(private _ngProgress: NgProgress) {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n      // Update progress bar config when inputs change\r\n      this.progressRef.setConfig({\r\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\r\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n        trickleFunc: this.trickleFunc,\r\n        debounceTime: this.debounceTime\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Get progress bar service instance\r\n    this.progressRef = this._ngProgress.ref(this.id, {\r\n      max: this.max,\r\n      min: this.min,\r\n      speed: this.speed,\r\n      trickleSpeed: this.trickleSpeed,\r\n      debounceTime: this.debounceTime\r\n    });\r\n\r\n    // Subscribe to progress state\r\n    this.state$ = this.progressRef.state.pipe(\r\n      map((state: NgProgressState) => ({\r\n        active: state.active,\r\n        transform: `translate3d(${state.value}%,0,0)`\r\n      }))\r\n    );\r\n\r\n    // Subscribes to started and completed events on demand\r\n    if (this.started.observers.length) {\r\n      this._started = this.progressRef.started.subscribe(() => this.started.emit());\r\n    }\r\n    if (this.completed.observers.length) {\r\n      this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._started.unsubscribe();\r\n    this._completed.unsubscribe();\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n      this.progressRef.destroy();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.progressRef.start();\r\n  }\r\n\r\n  complete() {\r\n    this.progressRef.complete();\r\n  }\r\n\r\n  inc(n?: number) {\r\n    this.progressRef.inc(n);\r\n  }\r\n\r\n  set(n: number) {\r\n    this.progressRef.set(n);\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgProgressComponent } from './ng-progress.component';\r\nimport { NgProgressConfig, NG_PROGRESS_CONFIG } from './ng-progress.interface';\r\n\r\n@NgModule({\r\n  declarations: [NgProgressComponent],\r\n  exports: [NgProgressComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class NgProgressModule {\r\n  static withConfig(config: NgProgressConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressModule,\r\n      providers: [\r\n        {provide: NG_PROGRESS_CONFIG, useValue: config}\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}