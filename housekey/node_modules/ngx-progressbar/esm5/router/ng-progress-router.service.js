/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, switchMap, filter } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
// import { NgProgress } from '../../src/public-api';
import { NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';
import * as i0 from "@angular/core";
import * as i1 from "ngx-progressbar";
import * as i2 from "@angular/router";
import * as i3 from "./ng-progress-router.interface";
/**
 * Check if a router event type exists in an array of router event types
 * @param {?} routerEvent
 * @param {?} events
 * @return {?}
 */
function eventExists(routerEvent, events) {
    /** @type {?} */
    var res = false;
    events.map((/**
     * @param {?} event
     * @return {?}
     */
    function (event) { return res = res || routerEvent instanceof event; }));
    return res;
}
var NgProgressRouter = /** @class */ (function () {
    function NgProgressRouter(progress, router, config) {
        var _this = this;
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? tslib_1.__assign({}, this._config, config) : this._config;
        /** @type {?} */
        var progressRef = progress.ref(this._config.id);
        /** @type {?} */
        var startProgress = of({}).pipe(tap((/**
         * @return {?}
         */
        function () { return progressRef.start(); })));
        /** @type {?} */
        var completeProgress = of({}).pipe(delay(this._config.delay), tap((/**
         * @return {?}
         */
        function () { return progressRef.complete(); })));
        /** @type {?} */
        var filterEvents = tslib_1.__spread(this._config.startEvents, this._config.completeEvents);
        router.events.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return eventExists(event, filterEvents); })), switchMap((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return eventExists(event, _this._config.startEvents) ? startProgress : completeProgress; }))).subscribe();
    }
    NgProgressRouter.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgProgressRouter.ctorParameters = function () { return [
        { type: NgProgress },
        { type: Router },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
    ]; };
    /** @nocollapse */ NgProgressRouter.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
    return NgProgressRouter;
}());
export { NgProgressRouter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgProgressRouter.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NiYXIvcm91dGVyLyIsInNvdXJjZXMiOlsibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFN0MsT0FBTyxFQUEwQix5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7Ozs7OztBQU9uRyxTQUFTLFdBQVcsQ0FBQyxXQUF3QixFQUFFLE1BQTJCOztRQUNwRSxHQUFHLEdBQUcsS0FBSztJQUNmLE1BQU0sQ0FBQyxHQUFHOzs7O0lBQUMsVUFBQyxLQUF3QixJQUFLLE9BQUEsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXLFlBQVksS0FBSyxFQUF6QyxDQUF5QyxFQUFDLENBQUM7SUFDcEYsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQ7SUFXRSwwQkFBWSxRQUFvQixFQUFFLE1BQWMsRUFBaUQsTUFBOEI7UUFBL0gsaUJBbUJDO1FBMUJnQixZQUFPLEdBQTJCO1lBQ2pELEVBQUUsRUFBRSxNQUFNO1lBQ1YsS0FBSyxFQUFFLENBQUM7WUFDUixXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDOUIsY0FBYyxFQUFFLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztTQUNuRSxDQUFDO1FBR0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxzQkFBSyxJQUFJLENBQUMsT0FBTyxFQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7WUFDOUQsV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7O1lBRTNDLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHOzs7UUFBQyxjQUFNLE9BQUEsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFuQixDQUFtQixFQUFDLENBQy9COztZQUVLLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN6QixHQUFHOzs7UUFBQyxjQUFNLE9BQUEsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUF0QixDQUFzQixFQUFDLENBQ2xDOztZQUVLLFlBQVksb0JBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFFbEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2hCLE1BQU07Ozs7UUFBQyxVQUFDLEtBQWtCLElBQUssT0FBQSxXQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUFoQyxDQUFnQyxFQUFDLEVBQ2hFLFNBQVM7Ozs7UUFBQyxVQUFDLEtBQWtCLElBQUssT0FBQSxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQS9FLENBQStFLEVBQUMsQ0FDbkgsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoQixDQUFDOztnQkE5QkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFqQlEsVUFBVTtnQkFIVixNQUFNO2dEQTZCc0MsUUFBUSxZQUFJLE1BQU0sU0FBQyx5QkFBeUI7OzsyQkE5QmpHO0NBa0RDLEFBL0JELElBK0JDO1NBNUJZLGdCQUFnQjs7Ozs7O0lBQzNCLG1DQUtFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25TdGFydCwgTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVycm9yLCBSb3V0ZXJFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCwgZGVsYXksIHN3aXRjaE1hcCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzIH0gZnJvbSAnbmd4LXByb2dyZXNzYmFyJztcclxuLy8gaW1wb3J0IHsgTmdQcm9ncmVzcyB9IGZyb20gJy4uLy4uL3NyYy9wdWJsaWMtYXBpJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc1JvdXRlckNvbmZpZywgTkdfUFJPR1JFU1NfUk9VVEVSX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3Mtcm91dGVyLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYSByb3V0ZXIgZXZlbnQgdHlwZSBleGlzdHMgaW4gYW4gYXJyYXkgb2Ygcm91dGVyIGV2ZW50IHR5cGVzXHJcbiAqIEBwYXJhbSByb3V0ZXJFdmVudFxyXG4gKiBAcGFyYW0gZXZlbnRzXHJcbiAqL1xyXG5mdW5jdGlvbiBldmVudEV4aXN0cyhyb3V0ZXJFdmVudDogUm91dGVyRXZlbnQsIGV2ZW50czogVHlwZTxSb3V0ZXJFdmVudD5bXSkge1xyXG4gIGxldCByZXMgPSBmYWxzZTtcclxuICBldmVudHMubWFwKChldmVudDogVHlwZTxSb3V0ZXJFdmVudD4pID0+IHJlcyA9IHJlcyB8fCByb3V0ZXJFdmVudCBpbnN0YW5jZW9mIGV2ZW50KTtcclxuICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzUm91dGVyIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcgPSB7XHJcbiAgICBpZDogJ3Jvb3QnLFxyXG4gICAgZGVsYXk6IDAsXHJcbiAgICBzdGFydEV2ZW50czogW05hdmlnYXRpb25TdGFydF0sXHJcbiAgICBjb21wbGV0ZUV2ZW50czogW05hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FcnJvcl1cclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9ncmVzczogTmdQcm9ncmVzcywgcm91dGVyOiBSb3V0ZXIsIEBPcHRpb25hbCgpIEBJbmplY3QoTkdfUFJPR1JFU1NfUk9VVEVSX0NPTkZJRykgY29uZmlnOiBOZ1Byb2dyZXNzUm91dGVyQ29uZmlnKSB7XHJcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWcgPyB7Li4udGhpcy5fY29uZmlnLCAuLi5jb25maWd9IDogdGhpcy5fY29uZmlnO1xyXG4gICAgY29uc3QgcHJvZ3Jlc3NSZWYgPSBwcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcclxuXHJcbiAgICBjb25zdCBzdGFydFByb2dyZXNzID0gb2Yoe30pLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiBwcm9ncmVzc1JlZi5zdGFydCgpKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZVByb2dyZXNzID0gb2Yoe30pLnBpcGUoXHJcbiAgICAgIGRlbGF5KHRoaXMuX2NvbmZpZy5kZWxheSksXHJcbiAgICAgIHRhcCgoKSA9PiBwcm9ncmVzc1JlZi5jb21wbGV0ZSgpKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBmaWx0ZXJFdmVudHMgPSBbLi4udGhpcy5fY29uZmlnLnN0YXJ0RXZlbnRzLCAuLi50aGlzLl9jb25maWcuY29tcGxldGVFdmVudHNdO1xyXG5cclxuICAgIHJvdXRlci5ldmVudHMucGlwZShcclxuICAgICAgZmlsdGVyKChldmVudDogUm91dGVyRXZlbnQpID0+IGV2ZW50RXhpc3RzKGV2ZW50LCBmaWx0ZXJFdmVudHMpKSxcclxuICAgICAgc3dpdGNoTWFwKChldmVudDogUm91dGVyRXZlbnQpID0+IGV2ZW50RXhpc3RzKGV2ZW50LCB0aGlzLl9jb25maWcuc3RhcnRFdmVudHMpID8gc3RhcnRQcm9ncmVzcyA6IGNvbXBsZXRlUHJvZ3Jlc3MpXHJcbiAgICApLnN1YnNjcmliZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=