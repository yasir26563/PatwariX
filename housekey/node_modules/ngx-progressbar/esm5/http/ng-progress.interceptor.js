/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
// import { NgProgress, NgProgressRef } from '../../src/public-api';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? tslib_1.__assign({}, this._config, config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    NgProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize((/**
         * @return {?}
         */
        function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._progressRef.complete();
            }
        })));
    };
    /**
     * Check if request is silent.
     * @param req request
     */
    /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    NgProgressInterceptor.prototype.checkUrl = /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var url = req.url.toLowerCase();
        /** @type {?} */
        var found = this._config.silentApis.find((/**
         * @param {?} u
         * @return {?}
         */
        function (u) { return url.startsWith(u); }));
        return !!found;
    };
    NgProgressInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
    ]; };
    return NgProgressInterceptor;
}());
export { NgProgressInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._inProgressCount;
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._progressRef;
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NiYXIvaHR0cC8iLCJzb3VyY2VzIjpbIm5nLXByb2dyZXNzLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFpQixNQUFNLGlCQUFpQixDQUFDOztBQUU1RCxPQUFPLEVBQXdCLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFN0Y7SUFVRSwrQkFBWSxVQUFzQixFQUErQyxNQUE2QjtRQVB0RyxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFFWixZQUFPLEdBQXlCO1lBQy9DLEVBQUUsRUFBRSxNQUFNO1lBQ1YsVUFBVSxFQUFFLEVBQUU7U0FDZixDQUFDO1FBR0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxzQkFBSyxJQUFJLENBQUMsT0FBTyxFQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwRSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7Ozs7SUFFRCx5Q0FBUzs7Ozs7SUFBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFBbEQsaUJBMEJDO1FBeEJDLDRCQUE0QjtRQUM1QixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztTQUNuRjtRQUVELDZCQUE2QjtRQUM3QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDM0I7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixRQUFROzs7UUFBQztZQUNQLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksS0FBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsRUFBRTtnQkFDL0IsS0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUM5QjtRQUNILENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7O0lBQ0ssd0NBQVE7Ozs7OztJQUFoQixVQUFpQixHQUFxQjs7WUFDOUIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFOztZQUMzQixLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSTs7OztRQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBakIsQ0FBaUIsRUFBQztRQUNwRSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7Z0JBbkRGLFVBQVU7Ozs7Z0JBSkYsVUFBVTtnREFjb0IsUUFBUSxZQUFJLE1BQU0sU0FBQyx1QkFBdUI7O0lBMENqRiw0QkFBQztDQUFBLEFBcERELElBb0RDO1NBbkRZLHFCQUFxQjs7Ozs7O0lBRWhDLGlEQUE2Qjs7Ozs7SUFDN0IsNkNBQW9DOzs7OztJQUNwQyx3Q0FHRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzcywgTmdQcm9ncmVzc1JlZiB9IGZyb20gJ25neC1wcm9ncmVzc2Jhcic7XHJcbi8vIGltcG9ydCB7IE5nUHJvZ3Jlc3MsIE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICcuLi8uLi9zcmMvcHVibGljLWFwaSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnLCBOR19QUk9HUkVTU19IVFRQX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MtaHR0cC5pbnRlcmZhY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc0ludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuXHJcbiAgcHJpdmF0ZSBfaW5Qcm9ncmVzc0NvdW50ID0gMDtcclxuICBwcml2YXRlIF9wcm9ncmVzc1JlZjogTmdQcm9ncmVzc1JlZjtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnID0ge1xyXG4gICAgaWQ6ICdyb290JyxcclxuICAgIHNpbGVudEFwaXM6IFtdXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IobmdQcm9ncmVzczogTmdQcm9ncmVzcywgQE9wdGlvbmFsKCkgQEluamVjdChOR19QUk9HUkVTU19IVFRQX0NPTkZJRykgY29uZmlnPzogTmdQcm9ncmVzc0h0dHBDb25maWcpIHtcclxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZyA/IHsuLi50aGlzLl9jb25maWcsIC4uLmNvbmZpZ30gOiB0aGlzLl9jb25maWc7XHJcbiAgICB0aGlzLl9wcm9ncmVzc1JlZiA9IG5nUHJvZ3Jlc3MucmVmKHRoaXMuX2NvbmZpZy5pZCk7XHJcbiAgfVxyXG5cclxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuXHJcbiAgICAvLyBJZ25vcmUgYnkgcmVxdWVzdCBoZWFkZXJzXHJcbiAgICBpZiAocmVxLmhlYWRlcnMuaGFzKCdpZ25vcmVQcm9ncmVzc0JhcicpKSB7XHJcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEuY2xvbmUoe2hlYWRlcnM6IHJlcS5oZWFkZXJzLmRlbGV0ZSgnaWdub3JlUHJvZ3Jlc3NCYXInKX0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZ25vcmUgc2lsZW50IGFwaSByZXF1ZXN0c1xyXG4gICAgaWYgKHRoaXMuY2hlY2tVcmwocmVxKSkge1xyXG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9pblByb2dyZXNzQ291bnQrKztcclxuXHJcbiAgICBpZiAoIXRoaXMuX3Byb2dyZXNzUmVmLmlzU3RhcnRlZCkge1xyXG4gICAgICB0aGlzLl9wcm9ncmVzc1JlZi5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXHJcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcclxuICAgICAgICB0aGlzLl9pblByb2dyZXNzQ291bnQtLTtcclxuICAgICAgICBpZiAodGhpcy5faW5Qcm9ncmVzc0NvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICB0aGlzLl9wcm9ncmVzc1JlZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiByZXF1ZXN0IGlzIHNpbGVudC5cclxuICAgKiBAcGFyYW0gcmVxIHJlcXVlc3RcclxuICAgKi9cclxuICBwcml2YXRlIGNoZWNrVXJsKHJlcTogSHR0cFJlcXVlc3Q8YW55Pikge1xyXG4gICAgY29uc3QgdXJsID0gcmVxLnVybC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgY29uc3QgZm91bmQgPSB0aGlzLl9jb25maWcuc2lsZW50QXBpcy5maW5kKCh1KSA9PiB1cmwuc3RhcnRzV2l0aCh1KSk7XHJcbiAgICByZXR1cm4gISFmb3VuZDtcclxuICB9XHJcbn1cclxuIl19