{"version":3,"sources":["/Users/ahmedyasir/Downloads/themeforest-ZxrtabYw-housekey-angular-material-design-real-estate-template/housekey/node_modules/ngx-input-file/fesm2015/ngx-input-file.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oIA6DE;;+BAE6B,AAI5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;m0HAuQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA4EsD,AAarD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8IAuED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAkC8C,AAK1B;;;;;;;;;;;;;;;;;;;;;;;;;EAapB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAwBkB","file":"ngx-input-file.js","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, EventEmitter, Input, Output, ViewChild, ElementRef, Component, forwardRef, HostListener, Directive, NgModule } from '@angular/core';\nimport { Validators, NG_VALUE_ACCESSOR, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nconst defaultSettings = {\n    classAnimation: 'bounce-in',\n    fileAccept: '*',\n    fileLimit: 1,\n    iconAdd: 'add',\n    iconDelete: 'delete',\n    iconFile: 'insert_drive_file',\n    iconLink: 'link',\n    linkEnabled: false,\n    placeholderLink: 'Link',\n    sizeLimit: null\n};\n\nvar InputFileRejectedReason;\n(function (InputFileRejectedReason) {\n    InputFileRejectedReason[InputFileRejectedReason[\"badFile\"] = 0] = \"badFile\";\n    InputFileRejectedReason[InputFileRejectedReason[\"limitReached\"] = 1] = \"limitReached\";\n    InputFileRejectedReason[InputFileRejectedReason[\"sizeReached\"] = 2] = \"sizeReached\";\n})(InputFileRejectedReason || (InputFileRejectedReason = {}));\n\nlet InputFileService = class InputFileService {\n    constructor(_config) {\n        this._config = _config;\n    }\n    get config() {\n        return this._config;\n    }\n    /**\n     * Whether the limit is not reached.\n     * @param files\n     */\n    limitGuard(files, fileLimit) {\n        return files.length < fileLimit;\n    }\n    /**\n     * Whether the file size is not bigger than the limit.\n     * @param file\n     * @param sizeLimit\n     */\n    sizeGuard(file, sizeLimit) {\n        return !sizeLimit || file.size < sizeLimit * 1024 * 1024; // TODO : improve\n    }\n    /**\n     * Whether the type of the file is enabled.\n     * @param file\n     * @param fileAccept\n     */\n    typeGuard(file, fileAccept) {\n        let enabled = fileAccept == null;\n        if (fileAccept) {\n            const accept = fileAccept.replace('*', '');\n            const types = accept.split(',');\n            for (const type of types) {\n                if (file.type.startsWith(type) || (type.charAt(0) === '.' && file.name != null && file.name.endsWith(type))) {\n                    enabled = true;\n                    break;\n                }\n            }\n        }\n        return enabled;\n    }\n};\nInputFileService.ngInjectableDef = ɵɵdefineInjectable({ factory: function InputFileService_Factory() { return new InputFileService(ɵɵinject(\"config\")); }, token: InputFileService, providedIn: \"root\" });\nInputFileService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    }),\n    __param(0, Inject('config')),\n    __metadata(\"design:paramtypes\", [Object])\n], InputFileService);\n\nfunction urlValidator(control) {\n    if (Validators.required(control) != null) {\n        return null;\n    }\n    const v = control.value;\n    /* tslint:disable */\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : { 'url': true };\n    /* tslint:enable */\n}\n\nvar InputFileComponent_1;\nlet InputFileComponent = InputFileComponent_1 = class InputFileComponent {\n    constructor(formBuilder, inputFileService) {\n        this.formBuilder = formBuilder;\n        this.inputFileService = inputFileService;\n        this.acceptedFile = new EventEmitter();\n        this.deletedFile = new EventEmitter();\n        this.rejectedFile = new EventEmitter();\n        this.files = new Array();\n        this.id = `ngx-input-file-${InputFileComponent_1.nextId++}`;\n        this.onChange = (files) => { };\n        this.onTouched = () => { };\n    }\n    set classAnimation(classAnimation) {\n        this._classAnimation = classAnimation;\n    }\n    get classAnimation() {\n        return this._classAnimation || this.inputFileService.config.classAnimation || defaultSettings.classAnimation;\n    }\n    set fileAccept(fileAccept) {\n        this._fileAccept = fileAccept;\n    }\n    get fileAccept() {\n        return this._fileAccept || this.inputFileService.config.fileAccept || defaultSettings.fileAccept;\n    }\n    set fileLimit(fileLimit) {\n        this._fileLimit = fileLimit;\n    }\n    get fileLimit() {\n        return this._fileLimit || this.inputFileService.config.fileLimit || defaultSettings.fileLimit;\n    }\n    set iconAdd(iconAdd) {\n        this._iconAdd = iconAdd;\n    }\n    get iconAdd() {\n        return this._iconAdd || this.inputFileService.config.iconAdd || defaultSettings.iconAdd;\n    }\n    set iconDelete(iconDelete) {\n        this._iconDelete = iconDelete;\n    }\n    get iconDelete() {\n        return this._iconDelete || this.inputFileService.config.iconDelete || defaultSettings.iconDelete;\n    }\n    set iconFile(iconFile) {\n        this._iconFile = iconFile;\n    }\n    get iconFile() {\n        return this._iconFile || this.inputFileService.config.iconFile || defaultSettings.iconFile;\n    }\n    set iconLink(iconLink) {\n        this._iconLink = iconLink;\n    }\n    get iconLink() {\n        return this._iconLink || this.inputFileService.config.iconLink || defaultSettings.iconLink;\n    }\n    set linkEnabled(linkEnabled) {\n        this._linkEnabled = linkEnabled;\n    }\n    get linkEnabled() {\n        return this._linkEnabled || this.inputFileService.config.linkEnabled || defaultSettings.linkEnabled;\n    }\n    set placeholderLink(placeholderLink) {\n        this._placeholderLink = placeholderLink;\n    }\n    get placeholderLink() {\n        return this._placeholderLink || this.inputFileService.config.placeholderLink || defaultSettings.placeholderLink;\n    }\n    set sizeLimit(sizeLimit) {\n        this._sizeLimit = sizeLimit;\n    }\n    get sizeLimit() {\n        return this._sizeLimit || this.inputFileService.config.sizeLimit || defaultSettings.sizeLimit;\n    }\n    get canAddFile() {\n        return this.files && this.files.length < this.fileLimit;\n    }\n    /**\n     * Angular lifecyle OnInit implementation.\n     */\n    ngOnInit() {\n        this.setForm();\n    }\n    /**\n     * On delete a file event handler.\n     * @param index\n     */\n    onDeleteFile(index) {\n        if (!this.disabled) {\n            const files = this.files.slice();\n            this.deletedFile.emit(files[index]);\n            files.splice(index, 1);\n            this.writeValue(files);\n        }\n    }\n    /**\n     * On drag over event handler.\n     * Adds a ripple effect on the button.\n     */\n    onDragOver(button) {\n        button.ripple.launch({ centered: true, persistent: true });\n    }\n    /**\n     * On drag leave event handler.\n     * Fades the ripple effect of the button.\n     */\n    onDragLeave(button) {\n        button.ripple.fadeOutAll();\n    }\n    /**\n     * On adds a link.\n     */\n    onLink() {\n        this.addLink = !this.addLink;\n    }\n    /**\n     * On replace one file event handler.\n     * Writes the value.\n     * @param fileList\n     * @param index\n     * @param fileInput\n     */\n    onReplaceFile(fileList, index, button, fileInput) {\n        if (!this.disabled) {\n            // Copies the array without reference.\n            const files = this.files.slice();\n            // Assumes that a single file can be replaced by a single file.\n            const inputFile = { file: fileList.item(0) };\n            button.ripple.fadeOutAll();\n            if (this.fileGuard(files, inputFile, true)) {\n                files[index] = inputFile;\n                this.acceptedFile.emit(inputFile);\n            }\n            this.writeValue(files);\n            if (fileInput) {\n                fileInput.value = '';\n            }\n        }\n    }\n    /**\n     * On select one or more files event handler.\n     * Writes the value.\n     * @param fileList\n     */\n    onSelectFile(fileList, button) {\n        if (!this.disabled) {\n            button.ripple.fadeOutAll();\n            // Copies the array without reference.\n            const files = this.files.slice();\n            Array.from(fileList).forEach(file => {\n                const inputFile = { file };\n                if (this.fileGuard(files, inputFile)) {\n                    files.push(inputFile);\n                    this.acceptedFile.emit(inputFile);\n                }\n            });\n            this.writeValue(files);\n            this.fileInput.nativeElement.value = '';\n        }\n    }\n    /**\n     * On submit the link form event handler.\n     */\n    onSubmitLink() {\n        if (!this.disabled && this.form.valid) {\n            const files = this.files.slice();\n            const inputFile = { link: this.form.value.link, preview: this.form.value.link };\n            files.push(inputFile);\n            this.acceptedFile.emit(inputFile);\n            this.onLink();\n            this.form.reset();\n            this.writeValue(files);\n        }\n    }\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param fn\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param fn\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param files\n     */\n    writeValue(files) {\n        if (!files) {\n            files = new Array();\n        }\n        this.files = files;\n        this.setFilePreview();\n        this.onChange(this.files);\n    }\n    /**\n     * Whether the file can be added to the model.\n     * @param files\n     * @param file,\n     * @param bypassLimit\n     */\n    fileGuard(files, file, bypassLimit) {\n        if (!bypassLimit && !this.inputFileService.limitGuard(files, this.fileLimit)) {\n            this.rejectedFile.emit({ reason: InputFileRejectedReason.limitReached, file });\n            return false;\n        }\n        if (!this.inputFileService.sizeGuard(file.file, this.sizeLimit)) {\n            this.rejectedFile.emit({ reason: InputFileRejectedReason.sizeReached, file });\n            return false;\n        }\n        if (!this.inputFileService.typeGuard(file.file, this.fileAccept)) {\n            this.rejectedFile.emit({ reason: InputFileRejectedReason.badFile, file });\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Sets the file preview with FileReader.\n     */\n    setFilePreview() {\n        for (const index in this.files) {\n            if (this.files[index].file != null && this.inputFileService.typeGuard(this.files[index].file, 'image/*')) {\n                const fr = new FileReader();\n                fr.onload = () => {\n                    this.files[index].preview = fr.result;\n                };\n                fr.readAsDataURL(this.files[index].file);\n            }\n        }\n    }\n    /**\n     * Sets the reactive form to insert a link.\n     */\n    setForm() {\n        this.form = this.formBuilder.group({\n            link: ['', [Validators.required, urlValidator]]\n        });\n    }\n};\nInputFileComponent.nextId = 0;\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], InputFileComponent.prototype, \"disabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], InputFileComponent.prototype, \"placeholder\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"classAnimation\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"fileAccept\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], InputFileComponent.prototype, \"fileLimit\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"iconAdd\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"iconDelete\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"iconFile\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"iconLink\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], InputFileComponent.prototype, \"linkEnabled\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], InputFileComponent.prototype, \"placeholderLink\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], InputFileComponent.prototype, \"sizeLimit\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], InputFileComponent.prototype, \"acceptedFile\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], InputFileComponent.prototype, \"deletedFile\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], InputFileComponent.prototype, \"rejectedFile\", void 0);\n__decorate([\n    ViewChild('fileInput', { static: false }),\n    __metadata(\"design:type\", ElementRef)\n], InputFileComponent.prototype, \"fileInput\", void 0);\nInputFileComponent = InputFileComponent_1 = __decorate([\n    Component({\n        selector: 'input-file',\n        template: \"<div class=\\\"input-file-container\\\">\\n    <label class=\\\"mat-orphan-label\\\" [for]=\\\"id\\\" [class.active]=\\\"files?.length\\\" [innerHtml]=\\\"placeholder\\\" *ngIf=\\\"placeholder\\\"></label>\\n    <div class=\\\"files-container\\\">\\n\\n        <ng-container *ngFor=\\\"let file of files; let i = index\\\">\\n            <div class=\\\"file-container\\\" [ngClass]=\\\"classAnimation\\\">\\n                <ng-container *ngTemplateOutlet=\\\"fileTemplate; context: { $implicit: file, index: i }\\\"></ng-container>\\n            </div>\\n        </ng-container>\\n\\n        <ng-container *ngIf=\\\"canAddFile\\\">\\n            <div class=\\\"file-container\\\">\\n                <ng-container *ngIf=\\\"!addLink; else linkTemplate\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"addTemplate\\\"></ng-container>\\n                </ng-container>\\n            </div>\\n        </ng-container>\\n    </div>\\n\\n</div>\\n\\n<ng-template #addTemplate>\\n    <button mat-button inputFileDropZone class=\\\"file-button\\\" type=\\\"button\\\" (click)=\\\"fileInput.click()\\\" (itemDrop)=\\\"onSelectFile($event, selectButton)\\\"\\n        (itemDragOver)=\\\"onDragOver(selectButton)\\\" (itemDragLeave)=\\\"onDragLeave(selectButton)\\\" [disabled]=\\\"disabled\\\" #selectButton>\\n        <mat-icon class=\\\"input-icon\\\">{{ iconAdd }}</mat-icon>\\n    </button>\\n    <button mat-button class=\\\"secondary-button\\\" type=\\\"button\\\" [disabled]=\\\"disabled\\\" (click)=\\\"onLink()\\\" *ngIf=\\\"linkEnabled\\\">\\n        <mat-icon>{{ iconLink }}</mat-icon>\\n    </button>\\n    <input [id]=\\\"id\\\" [accept]=\\\"fileAccept\\\" hidden type=\\\"file\\\" [attr.multiple]=\\\"fileLimit > 1 ? true : null\\\" #fileInput (change)=\\\"onSelectFile($event.target.files, selectButton)\\\">\\n</ng-template>\\n\\n<ng-template #fileTemplate let-file let-index=\\\"index\\\">\\n    <img class=\\\"image-preview\\\" [src]=\\\"file.preview\\\" *ngIf=\\\"file.preview\\\">\\n    <button mat-button inputFileDropZone class=\\\"replace-button\\\" type=\\\"button\\\" (click)=\\\"fileReplace.click()\\\" (itemDrop)=\\\"onReplaceFile($event, index, replaceButton)\\\"\\n        [disabled]=\\\"disabled\\\" (itemDragOver)=\\\"onDragOver(replaceButton)\\\" (itemDragLeave)=\\\"onDragLeave(replaceButton)\\\" #replaceButton>\\n        <ng-container *ngIf=\\\"!file.preview\\\">\\n            <mat-icon class=\\\"input-icon\\\">{{ iconFile }}</mat-icon>\\n            <div class=\\\"file-name text-truncate\\\" [innerHtml]=\\\"file.file.name\\\" *ngIf=\\\"file.file\\\"></div>\\n        </ng-container>\\n    </button>\\n    <button mat-button class=\\\"secondary-button\\\" type=\\\"button\\\" (click)=\\\"onDeleteFile(index)\\\" [disabled]=\\\"disabled\\\">\\n        <mat-icon>{{ iconDelete }}</mat-icon>\\n    </button>\\n    <input [accept]=\\\"fileAccept\\\" hidden type=\\\"file\\\" #fileReplace (change)=\\\"onReplaceFile($event.target.files, index, replaceButton, fileReplace)\\\">\\n</ng-template>\\n\\n<ng-template #linkTemplate>\\n    <form class=\\\"form-link slide-in-up\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmitLink()\\\" novalidate>\\n        <mat-form-field class=\\\"input-link\\\">\\n            <input matInput formControlName=\\\"link\\\" [placeholder]=\\\"placeholderLink\\\">\\n        </mat-form-field>\\n        <div class=\\\"form-link-button\\\">\\n            <button mat-button type=\\\"button\\\" (click)=\\\"onLink()\\\" [disabled]=\\\"disabled\\\">\\n                <mat-icon>arrow_back</mat-icon>\\n            </button>\\n            <button mat-button type=\\\"submit\\\" [disabled]=\\\"disabled\\\">\\n                <mat-icon>check</mat-icon>\\n            </button>\\n        </div>\\n    </form>\\n</ng-template>\",\n        providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => InputFileComponent_1),\n                multi: true\n            }\n        ],\n        styles: [\".input-file-container{position:relative}.input-file-container .files-container{display:flex;flex-direction:row;flex-wrap:wrap;padding-top:1.25rem}.input-file-container .file-button,.input-file-container .file-container{align-items:center;display:flex;height:10rem;justify-content:center;width:10rem}.input-file-container .secondary-button{width:10rem}.input-file-container .file-button{flex:1}.input-file-container .file-container{flex-direction:column;margin-right:1rem;overflow:hidden}.input-file-container .replace-button{flex:1;width:10rem}.input-file-container .mat-button:focus{outline:0}.input-file-container .file-name{width:calc(10rem - 2.5rem)}.input-file-container .image-preview{position:absolute;height:10rem;-o-object-fit:contain;object-fit:contain;width:10rem}.input-file-container .input-icon{font-size:calc(10rem / 4);height:calc(10rem / 4);width:calc(10rem / 4)}.input-file-container .form-link{display:flex;flex-direction:column;width:10rem}.input-file-container .input-link{width:10rem}.input-file-container .form-link-button{display:flex;flex-direction:row}.input-file-container .form-link-button .mat-button{min-width:calc(10rem / 2);width:calc(10rem / 2)}.input-file-container .mat-orphan-label{color:rgba(0,0,0,.54);display:block;font-size:1rem;left:0;margin:0;position:absolute;top:0;transform-origin:0;transition:.4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.input-file-container .mat-orphan-label.active{transform:scale(.75)}@-webkit-keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:scale3d(.3,.3,.3)}20%{transform:scale3d(1.1,1.1,1.1)}40%{transform:scale3d(.9,.9,.9)}60%{opacity:1;transform:scale3d(1.03,1.03,1.03)}80%{transform:scale3d(.97,.97,.97)}to{opacity:1;transform:scale3d(1,1,1)}}@keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:scale3d(.3,.3,.3)}20%{transform:scale3d(1.1,1.1,1.1)}40%{transform:scale3d(.9,.9,.9)}60%{opacity:1;transform:scale3d(1.03,1.03,1.03)}80%{transform:scale3d(.97,.97,.97)}to{opacity:1;transform:scale3d(1,1,1)}}.bounce-in{-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-name:bounceIn;animation-name:bounceIn}@-webkit-keyframes slideInUp{from{opacity:0;transform:translate3d(0,100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}@keyframes slideInUp{from{opacity:0;transform:translate3d(0,100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}.slide-in-up{-webkit-animation-duration:.25s;animation-duration:.25s;-webkit-animation-name:slideInUp;animation-name:slideInUp}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        InputFileService])\n], InputFileComponent);\n\nlet DropZoneDirective = class DropZoneDirective {\n    constructor() {\n        this.disabled = false;\n        this.itemDragOver = new EventEmitter();\n        this.itemDragLeave = new EventEmitter();\n        this.itemDrop = new EventEmitter();\n        // Prevent dragleave on children, could be better but it's cheap for better performance\n        this.whiteListClasses = ['file-button', 'mat-button-wrapper', 'input-icon'];\n    }\n    /**\n     * Drag Over event handler.\n     * @param event\n     */\n    onDragOver(event) {\n        this.preventAndStopEventPropagation(event);\n        if (!this.isOver && !this.disabled) {\n            this.isOver = true;\n            this.itemDragOver.emit();\n        }\n    }\n    /**\n     * Drag Leave event handler.\n     * @param event\n     */\n    onDragLeave(event) {\n        this.preventAndStopEventPropagation(event);\n        if (this.isOver && this.isTrueLeave(event) && !this.disabled) {\n            this.isOver = false;\n            this.itemDragLeave.emit();\n        }\n    }\n    /**\n     * Drop event handler.\n     * @param event\n     */\n    onDrop(event) {\n        if (!this.disabled) {\n            this.preventAndStopEventPropagation(event);\n            this.isOver = false;\n            try {\n                this.itemDrop.emit(event.dataTransfer.files);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n    }\n    /**\n     * Prevents and stops event propagration.\n     * @param event\n     */\n    preventAndStopEventPropagation(event) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Checks if the leave is not trigger by a children.\n     * @param event\n     */\n    isTrueLeave(event) {\n        for (const c of this.whiteListClasses) {\n            if (event.fromElement != null && event.fromElement.className.indexOf(c) >= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], DropZoneDirective.prototype, \"disabled\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], DropZoneDirective.prototype, \"itemDragOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], DropZoneDirective.prototype, \"itemDragLeave\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], DropZoneDirective.prototype, \"itemDrop\", void 0);\n__decorate([\n    HostListener('dragover', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], DropZoneDirective.prototype, \"onDragOver\", null);\n__decorate([\n    HostListener('dragleave', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], DropZoneDirective.prototype, \"onDragLeave\", null);\n__decorate([\n    HostListener('drop', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], DropZoneDirective.prototype, \"onDrop\", null);\nDropZoneDirective = __decorate([\n    Directive({\n        selector: '[inputFileDropZone]'\n    })\n], DropZoneDirective);\n\nvar InputFileModule_1;\nlet InputFileModule = InputFileModule_1 = class InputFileModule {\n    static forRoot(config) {\n        return {\n            ngModule: InputFileModule_1,\n            providers: [\n                InputFileService,\n                { provide: 'config', useValue: config }\n            ]\n        };\n    }\n};\nInputFileModule = InputFileModule_1 = __decorate([\n    NgModule({\n        declarations: [\n            DropZoneDirective,\n            InputFileComponent\n        ],\n        imports: [\n            CommonModule,\n            FormsModule,\n            MatButtonModule,\n            MatFormFieldModule,\n            MatIconModule,\n            MatInputModule,\n            ReactiveFormsModule\n        ],\n        exports: [\n            InputFileComponent\n        ],\n        providers: [\n            InputFileService\n        ],\n        entryComponents: [InputFileComponent]\n    })\n], InputFileModule);\n\nexport { InputFileComponent, InputFileModule, InputFileService, DropZoneDirective as ɵa };\n"]}