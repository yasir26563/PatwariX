/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, switchMap, filter } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
// import { NgProgress } from '../../src/public-api';
import { NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';
import * as i0 from "@angular/core";
import * as i1 from "ngx-progressbar";
import * as i2 from "@angular/router";
import * as i3 from "./ng-progress-router.interface";
/**
 * Check if a router event type exists in an array of router event types
 * @param {?} routerEvent
 * @param {?} events
 * @return {?}
 */
function eventExists(routerEvent, events) {
    /** @type {?} */
    let res = false;
    events.map((/**
     * @param {?} event
     * @return {?}
     */
    (event) => res = res || routerEvent instanceof event));
    return res;
}
export class NgProgressRouter {
    /**
     * @param {?} progress
     * @param {?} router
     * @param {?} config
     */
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? Object.assign({}, this._config, config) : this._config;
        /** @type {?} */
        const progressRef = progress.ref(this._config.id);
        /** @type {?} */
        const startProgress = of({}).pipe(tap((/**
         * @return {?}
         */
        () => progressRef.start())));
        /** @type {?} */
        const completeProgress = of({}).pipe(delay(this._config.delay), tap((/**
         * @return {?}
         */
        () => progressRef.complete())));
        /** @type {?} */
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => eventExists(event, filterEvents))), switchMap((/**
         * @param {?} event
         * @return {?}
         */
        (event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress))).subscribe();
    }
}
NgProgressRouter.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgProgressRouter.ctorParameters = () => [
    { type: NgProgress },
    { type: Router },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
];
/** @nocollapse */ NgProgressRouter.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgProgressRouter.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NiYXIvcm91dGVyLyIsInNvdXJjZXMiOlsibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFlLE1BQU0saUJBQWlCLENBQUM7QUFDekgsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUU3QyxPQUFPLEVBQTBCLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7Ozs7Ozs7O0FBT25HLFNBQVMsV0FBVyxDQUFDLFdBQXdCLEVBQUUsTUFBMkI7O1FBQ3BFLEdBQUcsR0FBRyxLQUFLO0lBQ2YsTUFBTSxDQUFDLEdBQUc7Ozs7SUFBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksV0FBVyxZQUFZLEtBQUssRUFBQyxDQUFDO0lBQ3BGLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUtELE1BQU0sT0FBTyxnQkFBZ0I7Ozs7OztJQVEzQixZQUFZLFFBQW9CLEVBQUUsTUFBYyxFQUFpRCxNQUE4QjtRQVA5RyxZQUFPLEdBQTJCO1lBQ2pELEVBQUUsRUFBRSxNQUFNO1lBQ1YsS0FBSyxFQUFFLENBQUM7WUFDUixXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDOUIsY0FBYyxFQUFFLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztTQUNuRSxDQUFDO1FBR0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxtQkFBSyxJQUFJLENBQUMsT0FBTyxFQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7Y0FDOUQsV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7O2NBRTNDLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQUMsQ0FDL0I7O2NBRUssZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3pCLEdBQUc7OztRQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUNsQzs7Y0FFSyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFFbEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2hCLE1BQU07Ozs7UUFBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQUMsRUFDaEUsU0FBUzs7OztRQUFDLENBQUMsS0FBa0IsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFDLENBQ25ILENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7O1lBOUJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQWpCUSxVQUFVO1lBSFYsTUFBTTs0Q0E2QnNDLFFBQVEsWUFBSSxNQUFNLFNBQUMseUJBQXlCOzs7Ozs7OztJQVAvRixtQ0FLRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uU3RhcnQsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FcnJvciwgUm91dGVyRXZlbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIGRlbGF5LCBzd2l0Y2hNYXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzcyB9IGZyb20gJ25neC1wcm9ncmVzc2Jhcic7XHJcbi8vIGltcG9ydCB7IE5nUHJvZ3Jlc3MgfSBmcm9tICcuLi8uLi9zcmMvcHVibGljLWFwaSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcsIE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLXJvdXRlci5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgcm91dGVyIGV2ZW50IHR5cGUgZXhpc3RzIGluIGFuIGFycmF5IG9mIHJvdXRlciBldmVudCB0eXBlc1xyXG4gKiBAcGFyYW0gcm91dGVyRXZlbnRcclxuICogQHBhcmFtIGV2ZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gZXZlbnRFeGlzdHMocm91dGVyRXZlbnQ6IFJvdXRlckV2ZW50LCBldmVudHM6IFR5cGU8Um91dGVyRXZlbnQ+W10pIHtcclxuICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgZXZlbnRzLm1hcCgoZXZlbnQ6IFR5cGU8Um91dGVyRXZlbnQ+KSA9PiByZXMgPSByZXMgfHwgcm91dGVyRXZlbnQgaW5zdGFuY2VvZiBldmVudCk7XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc1JvdXRlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBOZ1Byb2dyZXNzUm91dGVyQ29uZmlnID0ge1xyXG4gICAgaWQ6ICdyb290JyxcclxuICAgIGRlbGF5OiAwLFxyXG4gICAgc3RhcnRFdmVudHM6IFtOYXZpZ2F0aW9uU3RhcnRdLFxyXG4gICAgY29tcGxldGVFdmVudHM6IFtOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRXJyb3JdXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MsIHJvdXRlcjogUm91dGVyLCBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcpIGNvbmZpZzogTmdQcm9ncmVzc1JvdXRlckNvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnID8gey4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfSA6IHRoaXMuX2NvbmZpZztcclxuICAgIGNvbnN0IHByb2dyZXNzUmVmID0gcHJvZ3Jlc3MucmVmKHRoaXMuX2NvbmZpZy5pZCk7XHJcblxyXG4gICAgY29uc3Qgc3RhcnRQcm9ncmVzcyA9IG9mKHt9KS5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4gcHJvZ3Jlc3NSZWYuc3RhcnQoKSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgY29tcGxldGVQcm9ncmVzcyA9IG9mKHt9KS5waXBlKFxyXG4gICAgICBkZWxheSh0aGlzLl9jb25maWcuZGVsYXkpLFxyXG4gICAgICB0YXAoKCkgPT4gcHJvZ3Jlc3NSZWYuY29tcGxldGUoKSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZmlsdGVyRXZlbnRzID0gWy4uLnRoaXMuX2NvbmZpZy5zdGFydEV2ZW50cywgLi4udGhpcy5fY29uZmlnLmNvbXBsZXRlRXZlbnRzXTtcclxuXHJcbiAgICByb3V0ZXIuZXZlbnRzLnBpcGUoXHJcbiAgICAgIGZpbHRlcigoZXZlbnQ6IFJvdXRlckV2ZW50KSA9PiBldmVudEV4aXN0cyhldmVudCwgZmlsdGVyRXZlbnRzKSksXHJcbiAgICAgIHN3aXRjaE1hcCgoZXZlbnQ6IFJvdXRlckV2ZW50KSA9PiBldmVudEV4aXN0cyhldmVudCwgdGhpcy5fY29uZmlnLnN0YXJ0RXZlbnRzKSA/IHN0YXJ0UHJvZ3Jlc3MgOiBjb21wbGV0ZVByb2dyZXNzKVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19