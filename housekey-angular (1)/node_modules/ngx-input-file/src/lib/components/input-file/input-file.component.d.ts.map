{"version":3,"file":"input-file.component.d.ts","sources":["/Users/ahmedyasir/Downloads/PatwariX Revised/housekey-angular (1)/node_modules/ngx-input-file/src/lib/components/input-file/input-file.component.d.ts"],"sourcesContent":["import { ElementRef, EventEmitter, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { InputFile } from '../../interfaces/input-file';\nimport { InputFileRejected } from '../../interfaces/input-file-rejected';\nimport { InputFileService } from '../../services/input-file.service';\nimport { MatButton } from '@angular/material/button';\nexport declare class InputFileComponent implements ControlValueAccessor, OnInit {\n    private formBuilder;\n    private inputFileService;\n    static nextId: number;\n    private _classAnimation;\n    private _fileAccept;\n    private _fileLimit;\n    private _iconAdd;\n    private _iconDelete;\n    private _iconFile;\n    private _iconLink;\n    private _linkEnabled;\n    private _placeholderLink;\n    private _sizeLimit;\n    disabled: boolean;\n    placeholder: string;\n    classAnimation: string;\n    fileAccept: string;\n    fileLimit: number;\n    iconAdd: string;\n    iconDelete: string;\n    iconFile: string;\n    iconLink: string;\n    linkEnabled: boolean;\n    placeholderLink: string;\n    sizeLimit: number;\n    acceptedFile: EventEmitter<InputFile>;\n    deletedFile: EventEmitter<InputFile>;\n    rejectedFile: EventEmitter<InputFileRejected>;\n    fileInput: ElementRef;\n    addLink: boolean;\n    files: InputFile[];\n    form: FormGroup;\n    id: string;\n    onChange: (files: InputFile[]) => void;\n    onTouched: () => void;\n    readonly canAddFile: boolean;\n    constructor(formBuilder: FormBuilder, inputFileService: InputFileService);\n    /**\n     * Angular lifecyle OnInit implementation.\n     */\n    ngOnInit(): void;\n    /**\n     * On delete a file event handler.\n     * @param index\n     */\n    onDeleteFile(index: number): void;\n    /**\n     * On drag over event handler.\n     * Adds a ripple effect on the button.\n     */\n    onDragOver(button: MatButton): void;\n    /**\n     * On drag leave event handler.\n     * Fades the ripple effect of the button.\n     */\n    onDragLeave(button: MatButton): void;\n    /**\n     * On adds a link.\n     */\n    onLink(): void;\n    /**\n     * On replace one file event handler.\n     * Writes the value.\n     * @param fileList\n     * @param index\n     * @param fileInput\n     */\n    onReplaceFile(fileList: FileList, index: number, button: MatButton, fileInput?: HTMLInputElement): void;\n    /**\n     * On select one or more files event handler.\n     * Writes the value.\n     * @param fileList\n     */\n    onSelectFile(fileList: FileList, button: MatButton): void;\n    /**\n     * On submit the link form event handler.\n     */\n    onSubmitLink(): void;\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param fn\n     */\n    registerOnChange(fn: (files: Array<InputFile>) => void): void;\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param fn\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Implementation of ControlValueAccessor.\n     * @param files\n     */\n    writeValue(files: Array<InputFile>): void;\n    /**\n     * Whether the file can be added to the model.\n     * @param files\n     * @param file,\n     * @param bypassLimit\n     */\n    private fileGuard;\n    /**\n     * Sets the file preview with FileReader.\n     */\n    private setFilePreview;\n    /**\n     * Sets the reactive form to insert a link.\n     */\n    private setForm;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;"}